{"version":3,"sources":["../../lib/archiveService.js"],"names":["require","archiveService","getAccessKeyForTenant","module","exports","ctx","accessKey","sls","service","org","cli","log","data","name","tenant","app","provider","region","then","catch","err","Error"],"mappings":"AAAA;AAEA;;;;;;;;iBAIkDA,OAAO,CAAC,0BAAD,C;MAAjDC,c,YAAAA,c;MAAgBC,qB,YAAAA,qB;;AAExBC,MAAM,CAACC,OAAP;AAAA,+BAAiB,WAAgBC,GAAhB,EAAqB;AACpC;AACA,UAAMC,SAAS,SAASJ,qBAAqB,CAACG,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBC,GAAjB,CAA7C;AAEAJ,IAAAA,GAAG,CAACE,GAAJ,CAAQG,GAAR,CAAYC,GAAZ,CAAgB,uDAAhB;AAEA,UAAMC,IAAI,GAAG;AACXC,MAAAA,IAAI,EAAER,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBA,OADX;AAEXM,MAAAA,MAAM,EAAET,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBC,GAFb;AAGXM,MAAAA,GAAG,EAAEV,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBO,GAHV;AAIXC,MAAAA,QAAQ,EAAEX,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBQ,QAAhB,CAAyBH,IAJxB;AAKXI,MAAAA,MAAM,EAAEZ,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBQ,QAAhB,CAAyBC,MALtB;AAMXX,MAAAA;AANW,KAAb;AASA,WAAOL,cAAc,CAACW,IAAD,CAAd,CACJM,IADI,CACC,MAAM;AACVb,MAAAA,GAAG,CAACE,GAAJ,CAAQG,GAAR,CAAYC,GAAZ,CAAgB,mEAAhB;AACD,KAHI,EAIJQ,KAJI,CAIGC,GAAD,IAAS;AACdf,MAAAA,GAAG,CAACE,GAAJ,CAAQG,GAAR,CAAYC,GAAZ,CAAgB,+DAAhB;AACA,YAAM,IAAIU,KAAJ,CAAUD,GAAV,CAAN;AACD,KAPI,CAAP;AAQD,GAvBD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict';\n\n/*\n * Archive Service\n */\n\nconst { archiveService, getAccessKeyForTenant } = require('@serverless/platform-sdk');\n\nmodule.exports = async function (ctx) {\n  // Defaults\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.org);\n\n  ctx.sls.cli.log('Archiving this service in the Serverless Dashboard...');\n\n  const data = {\n    name: ctx.sls.service.service,\n    tenant: ctx.sls.service.org,\n    app: ctx.sls.service.app,\n    provider: ctx.sls.service.provider.name,\n    region: ctx.sls.service.provider.region,\n    accessKey,\n  };\n\n  return archiveService(data)\n    .then(() => {\n      ctx.sls.cli.log('Successfully archived this service in the Serverless Dashboard...');\n    })\n    .catch((err) => {\n      ctx.sls.cli.log('Failed to archive this service in the Serverless Dashboard...');\n      throw new Error(err);\n    });\n};\n"],"file":"archiveService.js"}