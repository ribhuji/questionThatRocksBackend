{"version":3,"sources":["../../lib/studio.js"],"names":["path","require","chokidar","ServerlessSDK","getAccessKeyForTenant","isEqual","findProcess","isAuthenticated","throwAuthError","Studio","ServerlessExec","possibleServerlessConfigFileVariants","map","configFile","resolve","module","exports","ctx","sls","service","app","org","ServerlessError","classes","Error","deployToStage","provider","getStage","deployToRegion","getRegion","processedInput","options","info","autoStage","process","env","USER","Math","floor","random","serverlessExec","endpoints","fetchEndpoints","stdout","write","JSON","stringify","meta","region","stage","functions","resources","cli","log","processes","length","accessKey","sdk","platformStage","SERVERLESS_PLATFORM_STAGE","studio","connect","publishSync","event","data","clientType","disconnect","isConnected","cleanup","remove","exit","filenameToFunctionsMapping","on","refreshAppState","publishAppState","isDeploying","deploy","rewatchFiles","filenameToFunctions","trackedFiles","watcher","unwatch","add","watch","cwd","Object","keys","functionToFilenames","filepath","isFunctionDeploying","appState","resolvedFilepath","normalize","sep","includes","isRedeploying","functionNames","functionsNeedingDeploy","filter","functionName","forEach","Promise","all","e"],"mappings":"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","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst chokidar = require('chokidar');\nconst { ServerlessSDK } = require('@serverless/platform-client');\nconst { getAccessKeyForTenant } = require('@serverless/platform-sdk');\nconst { isEqual } = require('lodash');\nconst findProcess = require('find-process');\n\nconst isAuthenticated = require('./isAuthenticated');\nconst throwAuthError = require('./throwAuthError');\n\n// Studio components\nconst Studio = require('./studio/Studio');\nconst ServerlessExec = require('./studio/ServerlessExec');\n\n/**\n * All serverless configuration file variants will be watched. Note that the absolute\n * path for this files is computed, since that is how chokidar is configured to watch\n * these files.\n */\nconst possibleServerlessConfigFileVariants = [\n  'serverless.yml',\n  'serverless.yaml',\n  'serverless.json',\n  'serverless.js',\n].map((configFile) => path.resolve(configFile));\n\nmodule.exports = async function (ctx) {\n  const {\n    sls: {\n      service: { app, org },\n      classes: { Error: ServerlessError },\n    },\n  } = ctx;\n  const { sls } = ctx;\n\n  if (!isAuthenticated()) {\n    throwAuthError(sls);\n  }\n\n  if (!org) throw new ServerlessError('Missing `org` setting', 'DASHBOARD_MISSING_ORG');\n  if (!app) throw new ServerlessError('Missing `app` setting', 'DASHBOARD_MISSING_APP');\n\n  let deployToStage = ctx.provider.getStage();\n  const deployToRegion = ctx.provider.getRegion();\n\n  const { info, autoStage } = sls.processedInput.options;\n\n  /**\n   * If specified, automatically pick a random stage, and remove it on exit\n   */\n  if (autoStage) {\n    deployToStage = `${process.env.USER || 'studio'}-${Math.floor(Math.random() * 100000)}`;\n  }\n\n  const serverlessExec = new ServerlessExec(deployToStage, deployToRegion);\n\n  /**\n   * Informational flag, used by parent watch process\n   */\n  if (info) {\n    const endpoints = await serverlessExec.fetchEndpoints();\n\n    /**\n     * Communicate relevant configuration settings to the parent process (sls studio):\n     *\n     *  - General app/org information\n     *  - Send new infra/functions to websocket\n     *  - Detect new functions to watch\n     */\n    process.stdout.write(\n      JSON.stringify({\n        meta: {\n          app: sls.service.app,\n          org: sls.service.org,\n          service: sls.service.service,\n          region: deployToRegion,\n          stage: deployToStage,\n        },\n        functions: sls.service.functions,\n        resources: sls.service.resources,\n        endpoints,\n      })\n    );\n\n    return;\n  }\n\n  sls.cli.log('Starting Serverless Studio...');\n\n  /**\n   * As a pseudo-failsafe, don't support the prod stage to limit WebSocket traffic\n   */\n  if (deployToStage === 'prod') {\n    sls.cli.log(\"Stage 'prod' cannot be used with 'serverless studio'\");\n    return;\n  }\n\n  /**\n   * Check to see if 'serverless studio' is already running\n   */\n  const processes = await findProcess('name', /(serverless|sls) studio/g);\n\n  if (processes.length === 0) {\n    sls.cli.log('Failed to detect running serverless process. Exiting.');\n    return;\n  }\n\n  /**\n   * Only one process can be running\n   */\n  if (processes.length > 1) {\n    sls.cli.log(\"Only one instance of 'serverless studio' can be running\");\n    return;\n  }\n\n  const accessKey = await getAccessKeyForTenant(sls.service.org);\n\n  const sdk = new ServerlessSDK({\n    platformStage: process.env.SERVERLESS_PLATFORM_STAGE || 'prod',\n    accessKey,\n  });\n\n  const studio = new Studio({ sdk, sls, serverlessExec });\n\n  /**\n   * Connect to the WebSocket\n   */\n  await studio.connect();\n\n  await sdk.publishSync({ event: 'studio.connect', data: { clientType: 'cli' } });\n\n  if (autoStage) {\n    sls.cli.log(`Auto stage generation enabled. Will deploy to stage: \"${deployToStage}\"...`);\n    sls.cli.log(`Note: exiting Studio will remove stage \"${deployToStage}\"...`);\n  }\n\n  const disconnect = async () => {\n    if (sdk.isConnected()) {\n      await sdk.publishSync({ event: 'studio.disconnect', data: { clientType: 'cli' } });\n      await sdk.disconnect();\n\n      process.stdout.write('\\n');\n      sls.cli.log('Disconnected from the Serverless Platform');\n    }\n  };\n\n  const cleanup = async () => {\n    await disconnect();\n\n    /**\n     * Tear down the stage if in \"auto-stage\" mode\n     */\n    if (autoStage) {\n      process.stdout.write('\\n');\n      sls.cli.log(`Cleaning up stage \"${deployToStage}\"...`);\n      await serverlessExec.remove();\n    }\n\n    process.exit(0);\n  };\n\n  let filenameToFunctionsMapping = {};\n\n  /**\n   * Capture ctrl+c and remove the stage that we setup\n   */\n  process.on('SIGINT', cleanup);\n  process.on('uncaughtException', disconnect);\n  process.on('exit', cleanup);\n\n  /**\n   * Communicate initial state of the serverless.yml\n   */\n  sls.cli.log('Sending initial app state...');\n\n  await studio.refreshAppState();\n  await studio.publishAppState({\n    isDeploying: true,\n  });\n\n  /**\n   * Deploy the serverless.yml file\n   */\n  await studio.deploy();\n\n  /**\n   * Compute new watch files. Only rewatch new files if parsing the serverless.yml file is successfull.\n   */\n  const rewatchFiles = async () => {\n    /**\n     * Compute new watch files. Only rewatch new files if parsing the serverless.yml file is successfull.\n     */\n    const { filenameToFunctions, trackedFiles } = await serverlessExec.info();\n\n    filenameToFunctionsMapping = filenameToFunctions;\n\n    /**\n     * Remove all paths\n     */\n    await watcher.unwatch('*');\n\n    /**\n     * Re-watch new files\n     */\n    watcher.add([...possibleServerlessConfigFileVariants, ...trackedFiles]);\n  };\n\n  /**\n   * Create a new watcher. By default don't watch anything. The serverless.yml file\n   * will be parsed for function handlers. Those handlers will have their dependency\n   * trees mapped, and those files will be added dynamically by `rewatchFiles()`\n   */\n  const watcher = chokidar.watch([], {\n    /**\n     * Tracked files are absolute, and explicit. By default cwd is the currently working directory,\n     * which means the mapping between function and files will be wrong.\n     */\n    cwd: '/',\n  });\n\n  sls.cli.log('Building function dependency watch list...');\n\n  await rewatchFiles();\n\n  sls.cli.log(\n    `Tracking ${\n      Object.keys(serverlessExec.functionToFilenames).length\n    } function handler(s), and their dependencies...`\n  );\n\n  watcher.on('ready', () => {\n    sls.cli.log('Watching for changes...');\n  });\n\n  /**\n   * Watch for file changes\n   */\n  watcher.on('change', async (filepath) => {\n    const { isFunctionDeploying } = studio.appState;\n\n    /**\n     * Force resolved file path to be absolute.\n     */\n    const resolvedFilepath = path.normalize(`${path.sep}${filepath}`);\n\n    /**\n     * A serverless.ya(m)l file has changed\n     */\n    if (\n      possibleServerlessConfigFileVariants.includes(resolvedFilepath) &&\n      !studio.appState.isDeploying\n    ) {\n      sls.cli.log('serverless configuration changed. Checking for function changes...');\n\n      /**\n       * Compare the function (names) in the serverless.yml file\n       * with what's already in the app state. We need to redeploy\n       * the stack if:\n       *\n       *  1. A new function has ben added\n       *  2. A function has been renamed\n       *  3. If you change settings of a function\n       */\n      const { functions } = await serverlessExec.info();\n\n      if (!isEqual(functions, studio.appState.functions)) {\n        sls.cli.log('Detected function configuration changes...');\n        sls.cli.log(`Stage \"${deployToStage}\" will be redeployed to reflect these changes...`);\n        await studio.deploy({ isRedeploying: true });\n        rewatchFiles();\n      } else {\n        sls.cli.log('No function changes detected. Continuing...');\n      }\n\n      return;\n    }\n\n    const functionNames = filenameToFunctionsMapping[resolvedFilepath];\n\n    if (!functionNames) {\n      return;\n    }\n\n    /**\n     * Only deploy a function that is not already deploying\n     */\n    const functionsNeedingDeploy = [...functionNames].filter(\n      (functionName) => !isFunctionDeploying[functionName]\n    );\n\n    /**\n     * Mark all functions as deploying, and communicate that state\n     */\n    functionsNeedingDeploy.forEach((functionName) => {\n      sls.cli.log(`${functionName}: changed. Redeploying...`);\n      isFunctionDeploying[functionName] = true;\n    });\n\n    if (functionsNeedingDeploy.length > 0) {\n      await studio.publishAppState();\n    }\n\n    /**\n     * Redeploy all changed functions\n     */\n    await Promise.all(\n      functionsNeedingDeploy.map(async (functionName) => {\n        /**\n         * Redeploy the function\n         */\n        try {\n          await studio.deploy({ isRedeploying: true, functionName });\n        } catch (e) {\n          /**\n           * This ocassionally fails, although I haven't yet been able\n           * to track down why.\n           */\n        } finally {\n          isFunctionDeploying[functionName] = false;\n        }\n      })\n    );\n\n    if (functionsNeedingDeploy.length > 0) {\n      await studio.publishAppState();\n      sls.cli.log('Watching for changes...');\n    }\n  });\n};\n"],"file":"studio.js"}