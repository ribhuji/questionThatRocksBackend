{"version":3,"sources":["../../lib/zipTree.js"],"names":["fs","require","path","module","exports","addTree","zip","src","srcN","normalize","contents","readdir","Promise","all","map","name","srcPath","join","stat","then","isDirectory","self","folder","opts","date","unixPermissions","mode","readFile","data","file","writeZip","targetPath","resolve","generateNodeStream","platform","process","compression","compressionOptions","level","pipe","createWriteStream","on"],"mappings":"AAAA,a,CAEA;AACA;;;;;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;AAEA;;;;;;;;AAMAE,MAAM,CAACC,OAAP,CAAeC,OAAf;AAAA,gCAAyB,WAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AACrD,UAAMC,IAAI,GAAGN,IAAI,CAACO,SAAL,CAAeF,GAAf,CAAb;AAEA,UAAMG,QAAQ,SAASV,EAAE,CAACW,OAAH,CAAWH,IAAX,CAAvB;AACA,UAAMI,OAAO,CAACC,GAAR,CACJH,QAAQ,CAACI,GAAT,CAAcC,IAAD,IAAU;AACrB,YAAMC,OAAO,GAAGd,IAAI,CAACe,IAAL,CAAUT,IAAV,EAAgBO,IAAhB,CAAhB;AAEA,aAAOf,EAAE,CAACkB,IAAH,CAAQF,OAAR,EAAiBG,IAAjB,CAAuBD,IAAD,IAAU;AACrC,YAAIA,IAAI,CAACE,WAAL,EAAJ,EAAwB;AACtB,iBAAOC,IAAI,CAACf,GAAG,CAACgB,MAAJ,CAAWP,IAAX,CAAD,EAAmBC,OAAnB,CAAX;AACD;;AACD,cAAMO,IAAI,GAAG;AAAEC,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,eAAe,EAAEP,IAAI,CAACQ;AAAjC,SAAb;AACA,eAAO1B,EAAE,CAAC2B,QAAH,CAAYX,OAAZ,EAAqBG,IAArB,CAA2BS,IAAD,IAAUtB,GAAG,CAACuB,IAAJ,CAASb,OAAT,EAAkBY,IAAlB,EAAwBL,IAAxB,CAApC,CAAP;AACD,OANM,CAAP;AAOD,KAVD,CADI,CAAN;AAaA,WAAOjB,GAAP,CAjBqD,CAiBzC;AACb,GAlBD;;AAAA,WAAwCe,IAAxC;AAAA;AAAA;;AAAA,SAAwCA,IAAxC;AAAA;AAoBA;;;;;;;;AAMAlB,MAAM,CAACC,OAAP,CAAe0B,QAAf,GAA0B,CAACxB,GAAD,EAAMyB,UAAN,KACxB,IAAInB,OAAJ,CAAaoB,OAAD,IACV1B,GAAG,CACA2B,kBADH,CACsB;AAClBC,EAAAA,QAAQ,EAAEC,OAAO,CAACD,QAAR,KAAqB,OAArB,GAA+B,KAA/B,GAAuC,MAD/B;AAElBE,EAAAA,WAAW,EAAE,SAFK;AAGlBC,EAAAA,kBAAkB,EAAE;AAClBC,IAAAA,KAAK,EAAE;AADW;AAHF,CADtB,EAQGC,IARH,CAQQvC,EAAE,CAACwC,iBAAH,CAAqBT,UAArB,CARR,EASGU,EATH,CASM,QATN,EASgBT,OAThB,CADF,CADF","sourcesContent":["'use strict';\n\n// mostly copied from https://github.com/UnitedIncome/serverless-python-requirements/blob/master/lib/zipTree.js\n// modified to use native promises and fs-extra's promise support and use import/export\nconst fs = require('fs-extra');\nconst path = require('path');\n\n/**\n * Add a directory recursively to a zip file. Files in src will be added to the top folder of zip.\n * @param {JSZip} zip a zip object in the folder you want to add files to.\n * @param {string} src the source folder.\n * @return {Promise} a promise offering the original JSZip object.\n */\nmodule.exports.addTree = async function self(zip, src) {\n  const srcN = path.normalize(src);\n\n  const contents = await fs.readdir(srcN);\n  await Promise.all(\n    contents.map((name) => {\n      const srcPath = path.join(srcN, name);\n\n      return fs.stat(srcPath).then((stat) => {\n        if (stat.isDirectory()) {\n          return self(zip.folder(name), srcPath);\n        }\n        const opts = { date: 0, unixPermissions: stat.mode };\n        return fs.readFile(srcPath).then((data) => zip.file(srcPath, data, opts));\n      });\n    })\n  );\n  return zip; // Original zip for chaining.\n};\n\n/**\n * Write zip contents to a file.\n * @param {JSZip} zip the zip object\n * @param {string} targetPath path to write the zip file to.\n * @return {Promise} a promise resolving to null.\n */\nmodule.exports.writeZip = (zip, targetPath) =>\n  new Promise((resolve) =>\n    zip\n      .generateNodeStream({\n        platform: process.platform === 'win32' ? 'DOS' : 'UNIX',\n        compression: 'deflate',\n        compressionOptions: {\n          level: 9,\n        },\n      })\n      .pipe(fs.createWriteStream(targetPath))\n      .on('finish', resolve)\n  );\n"],"file":"zipTree.js"}