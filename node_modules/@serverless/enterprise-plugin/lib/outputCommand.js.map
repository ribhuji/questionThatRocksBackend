{"version":3,"sources":["../../lib/outputCommand.js"],"names":["require","isEmpty","isObject","entries","chalk","cliTable","isAuthenticated","throwAuthError","resolveOutputs","resolveOutput","resolveInput","ctx","provider","sls","service","app","org","cliOptions","processedInput","options","ServerlessError","classes","Error","serviceName","stage","getStage","region","getRegion","stringifyValue","value","Array","isArray","map","valueItem","JSON","stringify","join","module","exports","get","context","name","error","message","includes","slsCli","cli","log","process","stdout","write","list","outputs","bold"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { isEmpty, isObject, entries } = require('lodash');\nconst chalk = require('chalk');\nconst cliTable = require('cli-color/columns');\nconst isAuthenticated = require('./isAuthenticated');\nconst throwAuthError = require('./throwAuthError');\nconst resolveOutputs = require('./resolveOutputs');\nconst resolveOutput = require('./resolveOutput');\n\nconst resolveInput = function (ctx) {\n  const {\n    provider,\n    sls: {\n      service: { app, org, service },\n      processedInput: { options: cliOptions },\n      classes: { Error: ServerlessError },\n    },\n  } = ctx;\n\n  if (!isAuthenticated()) throwAuthError(ctx.sls);\n\n  if (!org) throw new ServerlessError('Missing `org` setting', 'DASHBOARD_MISSING_ORG');\n  if (!app) throw new ServerlessError('Missing `app` setting', 'DASHBOARD_MISSING_APP');\n\n  const serviceName = cliOptions.service || service;\n  if (!serviceName) {\n    throw new ServerlessError('Missing `service` setting', 'DASHBOARD_MISSING_SERVICE');\n  }\n\n  const stage = cliOptions.stage || provider.getStage();\n  const region = cliOptions.region || provider.getRegion();\n\n  return { app, org, stage, region, service: serviceName };\n};\n\nconst stringifyValue = (value) => {\n  if (Array.isArray(value)) {\n    return value\n      .map((valueItem) => {\n        return isObject(valueItem) ? JSON.stringify(valueItem) : valueItem;\n      })\n      .join(', ');\n  }\n  if (isObject(value)) return JSON.stringify(value);\n  return value;\n};\n\nmodule.exports = {\n  get: async (context) => {\n    const { name } = context.sls.processedInput.options;\n    if (!name) {\n      throw new context.sls.classes.Error(\n        'Missing `name` parameter',\n        'DASHBOARD_MISSING_OUTPUT_NAME'\n      );\n    }\n    const value = await (async () => {\n      try {\n        return await resolveOutput(name, resolveInput(context));\n      } catch (error) {\n        if (error.message.includes(' not found')) return null;\n        throw error;\n      }\n    })();\n    const slsCli = context.sls.cli;\n    if (!value) slsCli.log(`No '${name}' output stored`);\n    else process.stdout.write(`${stringifyValue(value)}\\n`);\n  },\n  list: async (context) => {\n    const outputs = await resolveOutputs(resolveInput(context));\n    const slsCli = context.sls.cli;\n    if (isEmpty(outputs)) {\n      slsCli.log('No outputs stored');\n    } else {\n      slsCli.log('Stored outputs:');\n      process.stdout.write(\n        `\\n${cliTable([\n          [chalk.bold('Name'), chalk.bold('Value')],\n          ...entries(outputs).map(([name, value]) => [name, stringifyValue(value)]),\n        ])}\\n`\n      );\n    }\n  },\n};\n"],"file":"outputCommand.js"}