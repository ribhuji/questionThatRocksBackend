{"version":3,"sources":["../../lib/injectLogsIamRole.js"],"names":["require","getAccessKeyForTenant","getMetadata","entries","values","module","exports","ctx","sls","service","custom","enterprise","collectLambdaLogs","provider","compiledCloudFormationTemplate","Resources","filter","Type","length","accessKey","org","logAccessIamRole","awsAccountId","EnterpriseLogAccessIamRole","Properties","AssumeRolePolicyDocument","Version","Statement","Effect","Principal","AWS","Action","Condition","StringEquals","orgUid","Policies","PolicyName","PolicyDocument","Resource","map","logicalId","Outputs","Value"],"mappings":"AAAA;;;;;;iBAE+CA,OAAO,CAAC,0BAAD,C;MAA9CC,qB,YAAAA,qB;MAAuBC,W,YAAAA,W;;kBACHF,OAAO,CAAC,QAAD,C;MAA3BG,O,aAAAA,O;MAASC,M,aAAAA,M;;AAEjBC,MAAM,CAACC,OAAP;AAAA,+BAAiB,WAAgBC,GAAhB,EAAqB;AACpC,QACEA,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,IACAH,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,UADvB,IAEAJ,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,UAAvB,CAAkCC,iBAAlC,KAAwD,KAH1D,EAIE;AACA;AACD;;AAED,QACER,MAAM,CAACG,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBI,QAAhB,CAAyBC,8BAAzB,CAAwDC,SAAzD,CAAN,CAA0EC,MAA1E,CACE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAcA,IAAI,KAAK,qBADzB,EAEEC,MAFF,KAEa,CAHf,EAIE;AACA;AACA;AACD;;AAED,UAAMC,SAAS,SAASlB,qBAAqB,CAACM,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBW,GAAjB,CAA7C;;AAEA,QACEb,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,IACAH,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,UADvB,IAEAJ,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,UAAvB,CAAkCU,gBAHpC,EAIE;AACA;AACD;;AA1BmC,qCA4BLnB,WAAW,CAACiB,SAAD,CA5BN;AAAA,UA4B5BG,YA5B4B,sBA4B5BA,YA5B4B;;AA6BpCf,IAAAA,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBI,QAAhB,CAAyBC,8BAAzB,CAAwDC,SAAxD,CAAkEQ,0BAAlE,GAA+F;AAC7FN,MAAAA,IAAI,EAAE,gBADuF;AAE7FO,MAAAA,UAAU,EAAE;AACVC,QAAAA,wBAAwB,EAAE;AACxBC,UAAAA,OAAO,EAAE,YADe;AAExBC,UAAAA,SAAS,EAAE,CACT;AACEC,YAAAA,MAAM,EAAE,OADV;AAEEC,YAAAA,SAAS,EAAE;AACTC,cAAAA,GAAG,EAAG,gBAAeR,YAAa;AADzB,aAFb;AAKES,YAAAA,MAAM,EAAE,gBALV;AAMEC,YAAAA,SAAS,EAAE;AACTC,cAAAA,YAAY,EAAE;AACZ,kCAAmB,wBAAuB1B,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgByB,MAAO;AADrD;AADL;AANb,WADS;AAFa,SADhB;AAkBVC,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,UAAU,EAAE,iBADd;AAEEC,UAAAA,cAAc,EAAE;AACdX,YAAAA,OAAO,EAAE,YADK;AAEdC,YAAAA,SAAS,EAAE,CACT;AACEC,cAAAA,MAAM,EAAE,OADV;AAEEG,cAAAA,MAAM,EAAE,CAAC,sBAAD,CAFV;AAGEO,cAAAA,QAAQ,EAAEnC,OAAO,CAACI,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBI,QAAhB,CAAyBC,8BAAzB,CAAwDC,SAAzD,CAAP,CACPC,MADO,CACA,CAAC,GAAG;AAAEC,gBAAAA;AAAF,eAAH,CAAD,KAAkBA,IAAI,KAAK,qBAD3B,EAEPsB,GAFO,CAEH,CAAC,CAACC,SAAD,CAAD,MAAkB;AACrB,8BAAc,CAACA,SAAD,EAAY,KAAZ;AADO,eAAlB,CAFG;AAHZ,aADS;AAFG;AAFlB,SADQ;AAlBA;AAFiF,KAA/F;AAyCAjC,IAAAA,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBI,QAAhB,CAAyBC,8BAAzB,CAAwD2B,OAAxD,CAAgElB,0BAAhE,GAA6F;AAC3FmB,MAAAA,KAAK,EAAE;AACL,sBAAc,CAAC,4BAAD,EAA+B,KAA/B;AADT;AADoF,KAA7F;AAKD,GA3ED;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict';\n\nconst { getAccessKeyForTenant, getMetadata } = require('@serverless/platform-sdk');\nconst { entries, values } = require('lodash');\n\nmodule.exports = async function (ctx) {\n  if (\n    ctx.sls.service.custom &&\n    ctx.sls.service.custom.enterprise &&\n    ctx.sls.service.custom.enterprise.collectLambdaLogs === false\n  ) {\n    return;\n  }\n\n  if (\n    values(ctx.sls.service.provider.compiledCloudFormationTemplate.Resources).filter(\n      ({ Type }) => Type === 'AWS::Logs::LogGroup'\n    ).length === 0\n  ) {\n    // no log groups\n    return;\n  }\n\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.org);\n\n  if (\n    ctx.sls.service.custom &&\n    ctx.sls.service.custom.enterprise &&\n    ctx.sls.service.custom.enterprise.logAccessIamRole\n  ) {\n    return;\n  }\n\n  const { awsAccountId } = await getMetadata(accessKey);\n  ctx.sls.service.provider.compiledCloudFormationTemplate.Resources.EnterpriseLogAccessIamRole = {\n    Type: 'AWS::IAM::Role',\n    Properties: {\n      AssumeRolePolicyDocument: {\n        Version: '2012-10-17',\n        Statement: [\n          {\n            Effect: 'Allow',\n            Principal: {\n              AWS: `arn:aws:iam::${awsAccountId}:root`,\n            },\n            Action: 'sts:AssumeRole',\n            Condition: {\n              StringEquals: {\n                'sts:ExternalId': `ServerlessEnterprise-${ctx.sls.service.orgUid}`,\n              },\n            },\n          },\n        ],\n      },\n      Policies: [\n        {\n          PolicyName: 'LogFilterAccess',\n          PolicyDocument: {\n            Version: '2012-10-17',\n            Statement: [\n              {\n                Effect: 'Allow',\n                Action: ['logs:FilterLogEvents'],\n                Resource: entries(ctx.sls.service.provider.compiledCloudFormationTemplate.Resources)\n                  .filter(([, { Type }]) => Type === 'AWS::Logs::LogGroup')\n                  .map(([logicalId]) => ({\n                    'Fn::GetAtt': [logicalId, 'Arn'],\n                  })),\n              },\n            ],\n          },\n        },\n      ],\n    },\n  };\n  ctx.sls.service.provider.compiledCloudFormationTemplate.Outputs.EnterpriseLogAccessIamRole = {\n    Value: {\n      'Fn::GetAtt': ['EnterpriseLogAccessIamRole', 'Arn'],\n    },\n  };\n};\n"],"file":"injectLogsIamRole.js"}