{"version":3,"sources":["../../lib/variables.js"],"names":["_","require","resolveOutput","resolveParams","throwAuthError","getValueFromDashboardParams","ctx","variableString","variableName","slice","indexOf","state","secretsUsed","add","sls","processedInput","commands","interactiveCli","enterpriseEnabled","secrets","org","service","app","stage","provider","getStage","classes","Error","getValueFromDashboardOutputs","variableParts","split","key","region","getRegion","length","outputName","subkey","value","get","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst resolveOutput = require('./resolveOutput');\nconst resolveParams = require('./resolveParams');\nconst throwAuthError = require('./throwAuthError');\n\n// functions for new way of getting variables\nconst getValueFromDashboardParams = (ctx) => async (variableString) => {\n  const variableName = variableString.slice(variableString.indexOf(':') + 1);\n  ctx.state.secretsUsed.add(variableName);\n  if (\n    ctx.sls.processedInput.commands[0] === 'login' ||\n    ctx.sls.processedInput.commands[0] === 'logout' ||\n    ctx.sls.interactiveCli\n  ) {\n    return '';\n  }\n\n  if (!ctx.sls.enterpriseEnabled) throwAuthError(ctx.sls);\n  const secrets = await resolveParams({\n    org: ctx.sls.service.org,\n    app: ctx.sls.service.app,\n    stage: ctx.provider.getStage(),\n  });\n  if (!secrets[variableName]) {\n    throw new ctx.sls.classes.Error(`$\\{${variableString}} not defined`);\n  }\n  return secrets[variableName];\n};\n\nconst getValueFromDashboardOutputs = (ctx) => async (variableString) => {\n  if (\n    ctx.sls.processedInput.commands[0] === 'login' ||\n    ctx.sls.processedInput.commands[0] === 'logout' ||\n    ctx.sls.interactiveCli\n  ) {\n    return '';\n  }\n  const variableParts = variableString.split(':').slice(1);\n  let service;\n  let key;\n  let app = ctx.sls.service.app;\n  let stage = ctx.provider.getStage();\n  let region = ctx.provider.getRegion();\n  if (variableParts.length === 1) {\n    service = variableParts[0].split('.', 1)[0];\n    key = variableParts[0].slice(service.length);\n  } else if (variableParts.length === 4) {\n    service = variableParts[3].split('.', 1)[0];\n    key = variableParts[3].slice(service.length);\n    if (variableParts[0]) {\n      app = variableParts[0];\n    }\n    if (variableParts[1]) {\n      stage = variableParts[1];\n    }\n    if (variableParts[2]) {\n      region = variableParts[2];\n    }\n  } else {\n    throw new ctx.sls.classes.Error(\n      '`${${variableString}}` does not conform to syntax ${outputs:service.key} or ${outputs:app:stage:region:service.key}'\n    );\n  }\n  const outputName = key.split('.')[1];\n  const subkey = key.slice(outputName.length + 2);\n  if (!ctx.sls.enterpriseEnabled) throwAuthError(ctx.sls);\n  const value = resolveOutput(outputName, {\n    service,\n    app,\n    org: ctx.sls.service.org,\n    stage,\n    region,\n  });\n  if (subkey) {\n    return _.get(value, subkey);\n  }\n  return value;\n};\n\nmodule.exports = {\n  getValueFromDashboardParams,\n  getValueFromDashboardOutputs,\n};\n"],"file":"variables.js"}