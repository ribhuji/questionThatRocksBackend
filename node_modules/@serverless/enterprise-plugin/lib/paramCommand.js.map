{"version":3,"sources":["../../lib/paramCommand.js"],"names":["require","isEmpty","entries","chalk","cliTable","isAuthenticated","throwAuthError","resolveParams","resolveInput","ctx","provider","sls","service","app","org","cliOptions","processedInput","options","ServerlessError","classes","Error","stage","getStage","module","exports","get","context","params","name","slsCli","cli","log","process","stdout","write","list","bold"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { isEmpty, entries } = require('lodash');\nconst chalk = require('chalk');\nconst cliTable = require('cli-color/columns');\nconst isAuthenticated = require('./isAuthenticated');\nconst throwAuthError = require('./throwAuthError');\nconst resolveParams = require('./resolveParams');\n\nconst resolveInput = function (ctx) {\n  const {\n    provider,\n    sls: {\n      service: { app, org },\n      processedInput: { options: cliOptions },\n      classes: { Error: ServerlessError },\n    },\n  } = ctx;\n\n  if (!isAuthenticated()) throwAuthError(ctx.sls);\n\n  if (!org) throw new ServerlessError('Missing `org` setting', 'DASHBOARD_MISSING_ORG');\n  if (!app) throw new ServerlessError('Missing `app` setting', 'DASHBOARD_MISSING_APP');\n\n  const stage = cliOptions.stage || provider.getStage();\n\n  return { org, app, stage };\n};\n\nmodule.exports = {\n  get: async (context) => {\n    const params = await resolveParams(resolveInput(context));\n    const { name } = context.sls.processedInput.options;\n    if (!name) {\n      throw new context.sls.classes.Error(\n        'Missing `name` parameter',\n        'DASHBOARD_MISSING_PARAM_NAME'\n      );\n    }\n    const slsCli = context.sls.cli;\n    if (!params[name]) slsCli.log(`No '${name}' parameter stored`);\n    else process.stdout.write(`${params[name]}\\n`);\n  },\n  list: async (context) => {\n    const params = await resolveParams(resolveInput(context));\n    const slsCli = context.sls.cli;\n    if (isEmpty(params)) {\n      slsCli.log('No parameters stored');\n    } else {\n      slsCli.log('Stored parameters:');\n      process.stdout.write(\n        `\\n${cliTable([[chalk.bold('Name'), chalk.bold('Value')], ...entries(params)])}\\n`\n      );\n    }\n  },\n};\n"],"file":"paramCommand.js"}