{"version":3,"sources":["../../lib/plugin.js"],"names":["chalk","require","_","configureFetchDefaults","openBrowser","getAccessKeyForTenant","getMetadata","errorHandler","logsCollection","login","logout","wrap","injectLogsIamRole","injectOutputOutputs","wrapClean","runPolicies","getCredentials","getAppUids","removeDestination","saveDeployment","createAndSetDeploymentUid","variables","generate","eventDict","configureDeployProfile","test","getDashboardUrl","setApiGatewayAccessLogFormat","interactiveCli","paramCommand","outputCommand","isAuthenticated","throwAuthError","userNodeVersion","Number","process","version","split","slice","unconditionalCommands","Set","ServerlessEnterprisePlugin","constructor","sls","state","secretsUsed","service","org","tenant","configSchemaHandler","provider","name","defineTopLevelProperty","type","pattern","patternProperties","oneOf","additionalProperties","defineCustomProperties","properties","enterprise","collectApiGatewayLogs","collectLambdaLogs","compressLogs","disableAwsSpans","disableFrameworkInstrumentation","disableHttpSpans","logAccessIamRole","$ref","get","schema","definitions","logIngestMode","enum","safeguards","anyOf","isDisabled","location","policies","items","maxProperties","cliOptions","processedInput","options","isDashboardMonitoringPreconfigured","Boolean","isDashboardAppPreconfigured","app","isDashboardMonitoringOverridenByCli","commands","usage","lifecycleEvents","keys","join","shortcut","required","body","function","stage","region","list","autoStage","configDependent","isHidden","hooks","route","bind","variableResolvers","param","resolver","getValueFromDashboardParams","serviceName","isDisabledAtPrepopulation","secrets","output","getValueFromDashboardOutputs","pluginManager","plugins","plugin","values","command","Object","assign","missing","push","length","sfeEnabledHooks","match","RegExp","variableSyntax","classes","Error","hook","enterpriseEnabled","includes","accessKey","supportedRegions","getRegion","console","log","yellow","appUid","orgUid","studio","cli","logDeprecation","asyncInit","help","initializeServiceConfiguration","initializeProjectChoices","filter","value","missingConfigSettings","currentCommand","has","getProvider","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst chalk = require('chalk');\nconst _ = require('lodash');\nconst {\n  configureFetchDefaults,\n  openBrowser,\n  getAccessKeyForTenant,\n  getMetadata,\n} = require('@serverless/platform-sdk');\nconst errorHandler = require('./errorHandler');\nconst logsCollection = require('./logsCollection');\nconst login = require('./login');\nconst logout = require('./logout');\nconst wrap = require('./wrap');\nconst injectLogsIamRole = require('./injectLogsIamRole');\nconst injectOutputOutputs = require('./injectOutputOutputs');\nconst wrapClean = require('./wrapClean');\nconst runPolicies = require('./safeguards');\nconst getCredentials = require('./credentials');\nconst getAppUids = require('./appUids');\nconst removeDestination = require('./removeDestination');\nconst { saveDeployment, createAndSetDeploymentUid } = require('./deployment');\nconst variables = require('./variables');\nconst { generate, eventDict } = require('./generateEvent');\nconst { configureDeployProfile } = require('./deployProfile');\nconst { test } = require('./test');\nconst { getDashboardUrl } = require('./dashboard');\nconst setApiGatewayAccessLogFormat = require('./setApiGatewayAccessLogFormat');\nconst interactiveCli = require('./interactiveCli');\nconst paramCommand = require('./paramCommand');\nconst outputCommand = require('./outputCommand');\nconst isAuthenticated = require('./isAuthenticated');\nconst throwAuthError = require('./throwAuthError');\n\nconst userNodeVersion = Number(process.version.split('.')[0].slice(1));\n\nconst unconditionalCommands = new Set([\n  'dashboard',\n  'generate-event',\n  'help',\n  'login',\n  'logout',\n  'plugin',\n]);\n\n/*\n * Serverless Enterprise Plugin\n */\n\nclass ServerlessEnterprisePlugin {\n  constructor(sls) {\n    this.sls = sls;\n\n    // Defaults\n    this.state = {}; // Useful for storing data across hooks\n    this.state.secretsUsed = new Set();\n\n    // Backward compatibility with `tenant`\n    sls.service.org = sls.service.org || sls.service.tenant;\n    delete sls.service.tenant;\n\n    if (sls.configSchemaHandler && sls.service.provider.name === 'aws') {\n      // Source:\n      // https://github.com/serverless/enterprise-dashboard/blob/6c3a0fa28bff97a80d5f3f88a907fa887f734151/backend/src/utils/formats.js#L44-L48\n      sls.configSchemaHandler.defineTopLevelProperty('org', {\n        type: 'string',\n        pattern: '^[a-z0-9]{5,39}$',\n      });\n      // Source:\n      // https://github.com/serverless/enterprise-dashboard/blob/6c3a0fa28bff97a80d5f3f88a907fa887f734151/backend/src/utils/formats.js#L50-L56\n      sls.configSchemaHandler.defineTopLevelProperty('app', {\n        type: 'string',\n        pattern: '^[a-z0-9][a-z0-9-]{1,37}[a-z0-9]$',\n      });\n      sls.configSchemaHandler.defineTopLevelProperty('outputs', {\n        type: 'object',\n        patternProperties: {\n          '^[a-zA-Z0-9]+$': {\n            oneOf: [\n              { type: 'string' },\n              { type: 'number' },\n              { type: 'boolean' },\n              { type: 'array' },\n              { type: 'object' },\n            ],\n          },\n        },\n        additionalProperties: false,\n      });\n      sls.configSchemaHandler.defineCustomProperties({\n        properties: {\n          enterprise: {\n            type: 'object',\n            properties: {\n              collectApiGatewayLogs: { type: 'boolean' },\n              collectLambdaLogs: { type: 'boolean' },\n              compressLogs: { type: 'boolean' },\n              disableAwsSpans: { type: 'boolean' },\n              disableFrameworkInstrumentation: { type: 'boolean' },\n              disableHttpSpans: { type: 'boolean' },\n              logAccessIamRole: {\n                $ref: _.get(this.sls.configSchemaHandler.schema.definitions, 'awsArnString')\n                  ? '#/definitions/awsArnString'\n                  : '#/definitions/awsArn',\n              },\n              logIngestMode: { enum: ['push', 'pull'] },\n            },\n            additionalProperties: false,\n          },\n          safeguards: {\n            anyOf: [\n              {\n                type: 'object',\n                properties: {\n                  isDisabled: { type: 'boolean' },\n                },\n                additionalProperties: false,\n              },\n              {\n                type: 'object',\n                properties: {\n                  location: { type: 'string' },\n                  policies: {\n                    type: 'array',\n                    items: {\n                      oneOf: [\n                        { type: 'string' },\n                        {\n                          type: 'object',\n                          additionalProperties: { type: 'object' },\n                          maxProperties: 1,\n                        },\n                      ],\n                    },\n                  },\n                },\n                additionalProperties: false,\n              },\n            ],\n          },\n        },\n      });\n    }\n\n    const {\n      service,\n      processedInput: { options: cliOptions },\n    } = this.sls;\n    service.isDashboardMonitoringPreconfigured = Boolean(service.org);\n    if (service.isDashboardMonitoringPreconfigured) {\n      service.isDashboardAppPreconfigured = Boolean(service.app);\n      service.isDashboardMonitoringOverridenByCli =\n        (cliOptions.org && cliOptions.org !== service.org) ||\n        (cliOptions.app && cliOptions.app !== service.app);\n    }\n    if (cliOptions.org) service.org = cliOptions.org;\n    if (cliOptions.app) service.app = cliOptions.app;\n\n    configureFetchDefaults();\n\n    // Configure commands available to logged out users\n    this.commands = {\n      'login': {\n        usage: 'Login or sign up for Serverless',\n        lifecycleEvents: ['login'],\n        enterprise: true,\n      },\n      'logout': {\n        usage: 'Logout from Serverless',\n        lifecycleEvents: ['logout'],\n        enterprise: true,\n      },\n      'generate-event': {\n        usage: 'Generate event',\n        lifecycleEvents: ['generate-event'],\n        options: {\n          type: {\n            usage: `Specify event type. ${_.keys(eventDict).join(', ')} are supported.`,\n            shortcut: 't',\n            required: true,\n          },\n          body: {\n            usage: 'Specify the body for the message, request, or stream event.',\n            shortcut: 'b',\n          },\n        },\n        enterprise: true,\n      },\n      'test': {\n        usage: 'Run HTTP tests',\n        lifecycleEvents: ['test'],\n        options: {\n          function: {\n            usage: 'Specify the function to test',\n            shortcut: 'f',\n          },\n          test: {\n            usage: 'Specify a specific test to run',\n            shortcut: 't',\n          },\n        },\n        enterprise: true,\n      },\n      'dashboard': {\n        usage: 'Open the Serverless dashboard',\n        lifecycleEvents: ['dashboard'],\n        enterprise: true,\n      },\n      'output': {\n        usage: '',\n        commands: {\n          get: {\n            usage: 'Get value of dashboard deployment profile parameter',\n            lifecycleEvents: ['get'],\n            options: {\n              name: { usage: 'Ouptut name' },\n              org: { usage: 'Dashboard org' },\n              app: { usage: 'Dashboard app' },\n              service: { usage: 'Dashboard service' },\n              stage: { usage: 'Dashboard stage' },\n              region: { usage: 'Region' },\n            },\n          },\n          list: {\n            usage: 'List all dashboard deployment profile parameters',\n            lifecycleEvents: ['list'],\n            options: {\n              org: { usage: 'Dashboard org' },\n              app: { usage: 'Dashboard app' },\n              service: { usage: 'Dashboard service' },\n              stage: { usage: 'Dashboard stage' },\n              region: { usage: 'Region' },\n            },\n          },\n        },\n      },\n      'param': {\n        usage: '',\n        commands: {\n          get: {\n            usage: 'Get value of dashboard service output',\n            lifecycleEvents: ['get'],\n            options: {\n              org: { usage: 'Dashboard org' },\n              app: { usage: 'Dashboard app' },\n              stage: { usage: 'Dashboard stage' },\n            },\n          },\n          list: {\n            usage: 'List all dashboard service outputs',\n            lifecycleEvents: ['list'],\n            options: {\n              org: { usage: 'Dashboard org' },\n              app: { usage: 'Dashboard app' },\n              stage: { usage: 'Dashboard stage' },\n            },\n          },\n        },\n      },\n      'studio': {\n        usage: 'Develop a Serverless application in the cloud.',\n        lifecycleEvents: ['studio'],\n        options: {\n          stage: {\n            usage: 'Stage to use for development.',\n            shortcut: 's',\n          },\n          region: {\n            usage: 'Region to use for development.',\n            shortcut: 'r',\n          },\n          autoStage: {\n            usage: 'If specified, generate a random stage. This stage will be removed on exit.',\n            shortcut: 'a',\n          },\n        },\n        enterprise: true,\n        configDependent: true,\n      },\n      // TODO: Remove 'dev' with next major\n      'dev': {\n        lifecycleEvents: ['dev'],\n        isHidden: true,\n      },\n    };\n    this.hooks = {\n      'login:login': this.route('login:login').bind(this),\n      'logout:logout': this.route('logout:logout').bind(this),\n      'generate-event:generate-event': this.route('generate-event:generate-event').bind(this),\n      'test:test': this.route('test:test').bind(this),\n      'dashboard:dashboard': this.route('dashboard:dashboard').bind(this),\n      'output:get:get': this.route('output:get:get').bind(this),\n      'output:list:list': this.route('output:list:list').bind(this),\n      'param:get:get': this.route('param:get:get').bind(this),\n      'param:list:list': this.route('param:list:list').bind(this),\n      // behavior is conditional on this.sls.enterpriseEnabled\n      'after:aws:deploy:finalize:cleanup': this.route('after:aws:deploy:finalize:cleanup').bind(\n        this\n      ),\n      'studio:studio': this.route('studio:studio').bind(this),\n      'dev:dev': this.route('dev:dev').bind(this),\n    };\n    this.variableResolvers = {\n      param: {\n        resolver: variables.getValueFromDashboardParams(this),\n        serviceName: 'Serverless Parameters',\n        isDisabledAtPrepopulation: true,\n      },\n      secrets: {\n        resolver: variables.getValueFromDashboardParams(this),\n        serviceName: 'Serverless Secrets',\n        isDisabledAtPrepopulation: true,\n      },\n      output: {\n        resolver: variables.getValueFromDashboardOutputs(this),\n        serviceName: 'Serverless Outputs',\n        isDisabledAtPrepopulation: true,\n      },\n      state: {\n        resolver: variables.getValueFromDashboardOutputs(this),\n        serviceName: 'Serverless Outputs',\n        isDisabledAtPrepopulation: true,\n      },\n    };\n\n    // set allowed plugin options\n    for (const plugin of sls.pluginManager.plugins) {\n      if (plugin.constructor.name === 'InteractiveCli' && plugin.commands) {\n        if (!plugin.commands.interactiveCli.options) {\n          plugin.commands.interactiveCli.options = {};\n        }\n        plugin.commands.interactiveCli.options.app = { usage: 'Dashboard app' };\n        plugin.commands.interactiveCli.options.org = { usage: 'Dashboard org' };\n      } else if (plugin.commands) {\n        for (const command of _.values(plugin.commands)) {\n          if (command.configDependent) {\n            command.options.app = { usage: 'Dashboard app' };\n            command.options.org = { usage: 'Dashboard org' };\n          }\n        }\n      }\n    }\n    // Also adding in commands object of plugin man bc generating help doesn't reread the plugin\n    // itself\n    for (const command of _.values(sls.pluginManager.commands)) {\n      if (command.configDependent) {\n        command.options.app = { usage: 'Dashboard app' };\n        command.options.org = { usage: 'Dashboard org' };\n      }\n    }\n\n    // Add interactive CLI hooks\n    Object.assign(this.hooks, interactiveCli(this));\n\n    // Check if dashboard is configured\n    const missing = [];\n    if (!sls.service.org) {\n      missing.push('org');\n    }\n    if (!sls.service.app) {\n      missing.push('app');\n    }\n    if (!sls.service.service) {\n      missing.push('service');\n    }\n    if (missing.length > 0) {\n      this.sfeEnabledHooks = {};\n    } else {\n      if (\n        sls.service.app.match(new RegExp(sls.service.provider.variableSyntax)) ||\n        sls.service.org.match(new RegExp(sls.service.provider.variableSyntax))\n      ) {\n        throw new this.sls.classes.Error(\n          '\"app\" and \"org\" in your serverless config can not use the variable system'\n        );\n      }\n\n      this.sfeEnabledHooks = {\n        'before:package:createDeploymentArtifacts': this.route(\n          'before:package:createDeploymentArtifacts'\n        ).bind(this),\n        'after:package:createDeploymentArtifacts': this.route(\n          'after:package:createDeploymentArtifacts'\n        ).bind(this),\n        'before:deploy:function:packageFunction': this.route(\n          'before:deploy:function:packageFunction'\n        ).bind(this),\n        'after:deploy:function:packageFunction': this.route(\n          'after:deploy:function:packageFunction'\n        ).bind(this),\n        'before:invoke:local:invoke': this.route('before:invoke:local:invoke').bind(this),\n        'before:aws:package:finalize:saveServiceState': this.route(\n          'before:aws:package:finalize:saveServiceState'\n        ).bind(this),\n        'before:deploy:deploy': this.route('before:deploy:deploy').bind(this),\n        'before:aws:deploy:deploy:createStack': this.route(\n          'before:aws:deploy:deploy:createStack'\n        ).bind(this),\n        'after:deploy:finalize': this.route('after:deploy:finalize').bind(this),\n        'after:deploy:deploy': this.route('after:deploy:deploy').bind(this),\n        'before:info:info': this.route('before:info:info').bind(this),\n        'after:info:info': this.route('after:info:info').bind(this),\n        'before:logs:logs': this.route('before:logs:logs').bind(this),\n        'before:metrics:metrics': this.route('before:metrics:metrics').bind(this),\n        'before:remove:remove': this.route('before:remove:remove').bind(this),\n        'after:remove:remove': this.route('after:remove:remove').bind(this),\n        'after:invoke:local:invoke': this.route('after:invoke:local:invoke').bind(this),\n        'before:offline:start:init': this.route('before:offline:start:init').bind(this),\n        'before:step-functions-offline:start': this.route(\n          'before:step-functions-offline:start'\n        ).bind(this),\n      };\n      // Set Plugin hooks for authenticated Enteprise Plugin features\n      Object.assign(this.hooks, this.sfeEnabledHooks);\n    }\n  }\n\n  /*\n   * Route\n   */\n\n  route(hook) {\n    return async () => {\n      // throw an error if SFE is disabled and running an SFE only hook\n      if (!this.sls.enterpriseEnabled && _.keys(this.sfeEnabledHooks).includes(hook)) {\n        throwAuthError(this.sls);\n      }\n\n      switch (hook) {\n        case 'before:package:createDeploymentArtifacts': {\n          const accessKey = await getAccessKeyForTenant(this.sls.service.org);\n          const { supportedRegions } = await getMetadata(accessKey);\n          const region = this.provider.getRegion();\n          if (!supportedRegions.includes(region)) {\n            throw new this.sls.classes.Error(\n              `\"${region}\" region is not supported by dashboard`,\n              'DASHBOARD_NOT_SUPPORTED_REGION'\n            );\n          }\n          Object.assign(\n            this.sls.service,\n            await getAppUids(this.sls.service.org, this.sls.service.app)\n          );\n          createAndSetDeploymentUid(this);\n          await wrap(this);\n          await injectLogsIamRole(this);\n          await injectOutputOutputs(this);\n          await setApiGatewayAccessLogFormat(this);\n          break;\n        }\n        case 'after:package:createDeploymentArtifacts':\n          await wrapClean(this);\n          break;\n        case 'before:deploy:function:packageFunction':\n          createAndSetDeploymentUid(this);\n          await wrap(this);\n          break;\n        case 'after:deploy:function:packageFunction':\n          await wrapClean(this);\n          break;\n        case 'before:aws:package:finalize:saveServiceState':\n          await getCredentials(this);\n          await logsCollection(this);\n          break;\n        case 'before:deploy:deploy':\n          this.enterprise = {\n            errorHandler: errorHandler(this), // V.1 calls this when it crashes\n          };\n          await runPolicies(this);\n          break;\n        case 'before:aws:deploy:deploy:createStack':\n          break;\n        case 'after:aws:deploy:finalize:cleanup':\n          if (this.sls.enterpriseEnabled) {\n            await saveDeployment(this);\n          }\n          break;\n        case 'before:info:info':\n          await getCredentials(this);\n          break;\n        case 'after:info:info':\n          // eslint-disable-next-line no-console\n          console.log(\n            chalk.yellow(\n              `Run \"serverless dashboard\" to open the dashboard or visit ${getDashboardUrl(this)}`\n            )\n          );\n          break;\n        case 'dashboard:dashboard':\n          openBrowser(getDashboardUrl(this));\n          break;\n        case 'before:logs:logs':\n          await getCredentials(this);\n          break;\n        case 'before:metrics:metrics':\n          await getCredentials(this);\n          break;\n        case 'before:remove:remove':\n          await getCredentials(this);\n          break;\n        case 'after:remove:remove':\n          Object.assign(\n            this.sls.service,\n            await getAppUids(this.sls.service.org, this.sls.service.app)\n          );\n          await removeDestination(this);\n          await saveDeployment(this, true);\n          break;\n        case 'before:invoke:local:invoke':\n          Object.assign(this.sls.service, {\n            appUid: '000000000000000000',\n            orgUid: '000000000000000000',\n          });\n          await wrap(this);\n          break;\n        case 'after:invoke:local:invoke':\n          await wrapClean(this);\n          break;\n        case 'before:offline:start:init':\n          // await wrap(this)\n          break;\n        case 'before:step-functions-offline:start':\n          // await wrap(this)\n          break;\n        case 'login:login':\n          await login(this);\n          break;\n        case 'logout:logout':\n          await logout(this);\n          break;\n        case 'studio:studio':\n          if (userNodeVersion >= 8) {\n            const studio = require('./studio');\n            await studio(this);\n          } else {\n            this.sls.cli.log('Node 8 or higher is required to run Serverless Studio.');\n          }\n          break;\n        case 'dev:dev':\n          this.sls.cli.log('The command \"dev\" has been renamed to \"studio\".');\n          if (this.sls.logDeprecation) {\n            this.sls.logDeprecation(\n              'DASHBOARD_DEV_COMMAND',\n              '\"dev\" command will be removed with next major release'\n            );\n          }\n          break;\n        case 'generate-event:generate-event':\n          await generate(this);\n          break;\n        case 'test:test':\n          await test(this);\n          break;\n        case 'param:get:get':\n          await paramCommand.get(this);\n          break;\n        case 'param:list:list':\n          await paramCommand.list(this);\n          break;\n        case 'output:get:get':\n          await outputCommand.get(this);\n          break;\n        case 'output:list:list':\n          await outputCommand.list(this);\n          break;\n\n        default:\n      }\n    };\n  }\n\n  async asyncInit() {\n    if (\n      this.sls.processedInput.options['help-interactive'] ||\n      this.sls.processedInput.options.help\n    ) {\n      return;\n    }\n    if (this.sls.interactiveCli && this.sls.interactiveCli.initializeServiceConfiguration) {\n      // Filter available projects to create if there's an intention to configure dashboard\n      if (this.sls.processedInput.options.org || this.sls.processedInput.options.app) {\n        this.sls.interactiveCli.initializeServiceConfiguration.initializeProjectChoices = this.sls.interactiveCli.initializeServiceConfiguration.initializeProjectChoices.filter(\n          ({ value }) => ['aws-nodejs', 'aws-python3', 'aws-python'].includes(value)\n        );\n      }\n    }\n\n    const missingConfigSettings = [];\n    if (!this.sls.service.org) {\n      missingConfigSettings.push('org');\n    }\n    if (!this.sls.service.app) {\n      missingConfigSettings.push('app');\n    }\n    if (!this.sls.service.service) {\n      missingConfigSettings.push('service');\n    }\n    const currentCommand = this.sls.processedInput.commands[0];\n    if (\n      missingConfigSettings.length === 0 &&\n      isAuthenticated() &&\n      !unconditionalCommands.has(currentCommand)\n    ) {\n      this.sls.enterpriseEnabled = true;\n    }\n    // this.provider, intentionally not set in constructor, as then it affects plugin validation\n    // in serverless, which will discard plugin when command not run in service context:\n    // https://github.com/serverless/serverless/blob/f0ccf6441ace7b5cc524e774f025a39c3c0667f2/lib/classes/PluginManager.js#L78\n    this.provider = this.sls.getProvider('aws');\n    if (this.sls.enterpriseEnabled) await configureDeployProfile(this);\n  }\n}\n\nmodule.exports = ServerlessEnterprisePlugin;\n"],"file":"plugin.js"}