{"version":3,"sources":["../../../lib/test/runTest.js"],"names":["require","entries","fetch","TestError","objectSubsetEquals","runTest","testSpec","path","method","baseApiUrl","body","headers","queryString","request","JSON","stringify","form","map","key","value","encodeURIComponent","join","Object","assign","resp","respBody","text","response","ok","status","_headers","json","parse","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { entries } = require('lodash');\nconst fetch = require('node-fetch');\nconst { TestError } = require('./errors');\nconst objectSubsetEquals = require('./objectSubsetEquals');\n\nconst runTest = async (testSpec, path, method, baseApiUrl) => {\n  let body;\n  const headers = {};\n  let queryString = '';\n  if (testSpec.request && testSpec.request.body) {\n    if (typeof testSpec.request.body === 'string') {\n      body = testSpec.request.body; // eslint-disable-line prefer-destructuring\n    } else {\n      body = JSON.stringify(testSpec.request.body);\n      headers['Content-Type'] = 'application/json';\n    }\n  }\n  if (testSpec.request && testSpec.request.form) {\n    queryString = entries(testSpec.request.form)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n      .join('&');\n  }\n  if (testSpec.request && testSpec.request.headers) {\n    Object.assign(headers, testSpec.request.headers);\n  }\n  const resp = await fetch(`${baseApiUrl}/${path}?${queryString}`, {\n    method,\n    body,\n    headers,\n  });\n  const respBody = await resp.text();\n  if (testSpec.response === true && !resp.ok) {\n    throw new TestError('status', 200, resp.status, resp, respBody);\n  } else if (testSpec.response) {\n    if (testSpec.response.headers) {\n      /* eslint-disable no-underscore-dangle */\n      if (!objectSubsetEquals(testSpec.response.headers, resp.headers._headers)) {\n        throw new TestError(\n          'headers',\n          testSpec.response.headers,\n          resp.headers._headers,\n          resp,\n          respBody\n        );\n      }\n      /* eslint-enable */\n    }\n    if (testSpec.response.status && resp.status !== testSpec.response.status) {\n      throw new TestError('status', testSpec.response.status, resp.status, resp, respBody);\n    }\n    if (testSpec.response.body) {\n      if (typeof testSpec.response.body === 'string') {\n        if (respBody !== testSpec.response.body) {\n          throw new TestError('body', testSpec.response.body, respBody, resp, respBody);\n        }\n      } else {\n        const json = JSON.parse(respBody);\n        if (!objectSubsetEquals(testSpec.response.body, json)) {\n          throw new TestError('body', testSpec.response.body, json, resp, respBody);\n        }\n      }\n    }\n  }\n};\n\nmodule.exports = runTest;\n"],"file":"runTest.js"}