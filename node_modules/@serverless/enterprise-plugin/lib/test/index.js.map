{"version":3,"sources":["../../../lib/test/index.js"],"names":["require","entries","find","fse","chalk","yaml","runTest","module","exports","test","ctx","sls","enterpriseEnabled","cli","log","exists","tests","safeLoad","readFile","options","processedInput","function","filter","endpoint","name","cfnStack","provider","request","StackName","naming","getStackName","apigResource","Stacks","Outputs","OutputKey","endsWith","match","getServiceEndpointRegex","baseApiUrl","OutputValue","errors","numTests","funcs","service","functions","testSpec","method","events","http","split","path","testName","toUpperCase","process","stdout","write","green","error","push","red","length","yellow","i","resp","headers","status","info","_headers","map","key","value","join","replace","body","grey","expectedAndReceived","field","expected","JSON","stringify","received","white","passed","failed"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { entries, find } = require('lodash');\nconst fse = require('fs-extra');\nconst chalk = require('chalk');\nconst yaml = require('js-yaml');\n\nconst runTest = require('./runTest');\n\nmodule.exports.test = async (ctx) => {\n  if (!ctx.sls.enterpriseEnabled) {\n    ctx.sls.cli.log('Run \"serverless\" to configure your service for testing.');\n    return;\n  }\n  if (!fse.exists('serverless.test.yml')) {\n    ctx.sls.cli.log('No serverless.test.yml file found');\n    return;\n  }\n  let tests = yaml.safeLoad(await fse.readFile('serverless.test.yml'));\n\n  const { options } = ctx.sls.processedInput;\n  if (options.function) {\n    tests = tests.filter(({ endpoint }) => endpoint.function === options.function);\n  }\n  if (options.test) {\n    tests = tests.filter(({ name }) => name === options.test);\n  }\n\n  const cfnStack = await ctx.provider.request('CloudFormation', 'describeStacks', {\n    StackName: ctx.provider.naming.getStackName(),\n  });\n  const apigResource = find(\n    cfnStack.Stacks[0].Outputs,\n    ({ OutputKey }) =>\n      !OutputKey.endsWith('Websocket') &&\n      OutputKey.match(ctx.provider.naming.getServiceEndpointRegex())\n  );\n  const baseApiUrl = apigResource.OutputValue;\n\n  ctx.sls.cli.log(\n    `Test Results:\n\n   Summary --------------------------------------------------\n`\n  );\n\n  const errors = [];\n  let numTests = 0;\n\n  const funcs = ctx.sls.service.functions || {};\n  for (const testSpec of tests || []) {\n    let method = testSpec.endpoint.method;\n    if (!method) {\n      if (typeof funcs[testSpec.endpoint.function].events[0].http === 'string') {\n        method = funcs[testSpec.endpoint.function].events[0].http.split(' ')[0];\n      } else {\n        method = funcs[testSpec.endpoint.function].events[0].http.method;\n      }\n    }\n    let path = testSpec.endpoint.path;\n    if (!path) {\n      if (typeof funcs[testSpec.endpoint.function].events[0].http === 'string') {\n        path = funcs[testSpec.endpoint.function].events[0].http.split(' ')[1];\n      } else {\n        path = funcs[testSpec.endpoint.function].events[0].http.path;\n      }\n    }\n    const testName = `${method.toUpperCase()} ${path} - ${testSpec.name}`;\n    try {\n      numTests += 1;\n      process.stdout.write(`  running - ${testName}`);\n      await runTest(testSpec, path, method, baseApiUrl);\n      process.stdout.write(`\\r   ${chalk.green('passed')} - ${testName}\\n`);\n    } catch (error) {\n      errors.push({ testSpec, error });\n      process.stdout.write(`\\r   ${chalk.red('failed')} - ${testName}\\n`);\n    }\n  }\n  process.stdout.write('\\n');\n  if (errors.length > 0) {\n    process.stdout.write(\n      `   ${chalk.yellow('Details --------------------------------------------------')}\\n\\n`\n    );\n\n    for (let i = 0; i < errors.length; i++) {\n      const { error, testSpec } = errors[i];\n      const { headers, status } = error.resp;\n      process.stdout.write(`   ${i + 1}) ${chalk.red(`Failed -  ${testSpec.name}`)}\\n`);\n      /* eslint-disable no-underscore-dangle */\n      const info = `      status: ${status}\n      headers:\n    ${entries(headers._headers)\n      .map(([key, value]) => `    ${key}: ${value}`)\n      .join('\\n')\n      .replace(/\\n/g, '\\n    ')}\n      body: ${error.body}`;\n      /* eslint-enable */\n      process.stdout.write(chalk.grey(info));\n\n      const expectedAndReceived = `\n      expected: ${error.field} = ${\n        typeof error.expected === 'object'\n          ? JSON.stringify(error.expected, null, 2).replace(/\\n/g, '\\n      ')\n          : error.expected\n      }\n      received: ${error.field} = ${\n        typeof error.received === 'object'\n          ? JSON.stringify(error.received, null, 2).replace(/\\n/g, '\\n      ')\n          : error.received\n      }\\n\\n`;\n      process.stdout.write(`\\n${chalk.white(expectedAndReceived)}`);\n    }\n  }\n\n  const passed = chalk.green(`${numTests - errors.length} passed`);\n  const failed = chalk.red(`${errors.length} failed`);\n  ctx.sls.cli.log(`Test Summary: ${passed}, ${failed}`);\n};\n"],"file":"index.js"}