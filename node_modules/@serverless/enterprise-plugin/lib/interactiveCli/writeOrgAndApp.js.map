{"version":3,"sources":["../../../lib/interactiveCli/writeOrgAndApp.js"],"names":["path","require","readFile","writeFile","getServerlessFilePath","yamlExtensions","Set","appPattern","orgPattern","module","exports","serverless","orgName","appName","serverlessFileName","processedInput","options","config","servicePath","ymlString","has","extname","error","code","process","stdout","write","toString","appMatch","match","replace","orgMatch","service","org","app","enterpriseEnabled"],"mappings":"AAAA;;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;iBACgCA,OAAO,CAAC,UAAD,C;MAA/BC,Q,YAAAA,Q;MAAUC,S,YAAAA,S;;AAClB,MAAMC,qBAAqB,GAAGH,OAAO,CAAC,qCAAD,CAArC;;AAEA,MAAMI,cAAc,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,EAAS,OAAT,CAAR,CAAvB;AAEA,MAAMC,UAAU,GAAG,sBAAnB;AACA,MAAMC,UAAU,GAAG,iCAAnB;;AAEAC,MAAM,CAACC,OAAP;AAAA,+BAAiB,WAAOC,UAAP,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAwC;AACvD,UAAMC,kBAAkB,SAASV,qBAAqB,CACpDO,UAAU,CAACI,cAAX,CAA0BC,OAA1B,CAAkCC,MADkB,EAEpDN,UAAU,CAACM,MAAX,CAAkBC,WAFkC,CAAtD;AAKA,QAAIC,SAAS,SAAS,kBAAC,aAAY;AACjC,UAAI,CAACd,cAAc,CAACe,GAAf,CAAmBpB,IAAI,CAACqB,OAAL,CAAaP,kBAAb,CAAnB,CAAL,EAA2D,OAAO,IAAP,CAD1B,CACuC;;AACxE,UAAI;AACF,qBAAaZ,QAAQ,CAACY,kBAAD,CAArB;AACD,OAFD,CAEE,OAAOQ,KAAP,EAAc;AACd,YAAIA,KAAK,CAACC,IAAN,KAAe,QAAnB,EAA6B,OAAO,IAAP;AAC7B,cAAMD,KAAN;AACD;AACF,KARqB,GAAtB;;AAUA,QAAI,CAACH,SAAL,EAAgB;AACdK,MAAAA,OAAO,CAACC,MAAR,CAAeC,KAAf,CACE,0EACG,QAAOd,OAAQ,UAASC,OAAQ,IAFrC;AAIA;AACD;;AACDM,IAAAA,SAAS,GAAGA,SAAS,CAACQ,QAAV,EAAZ;AACA,UAAMC,QAAQ,GAAGT,SAAS,CAACU,KAAV,CAAgBtB,UAAhB,CAAjB;;AACA,QAAIqB,QAAJ,EAAc;AACZT,MAAAA,SAAS,GAAGA,SAAS,CAACW,OAAV,CAAkBF,QAAQ,CAAC,CAAD,CAA1B,EAAgC,QAAOf,OAAQ,EAA/C,CAAZ;AACD,KAFD,MAEO;AACLM,MAAAA,SAAS,GAAI,QAAON,OAAQ,KAAIM,SAAU,EAA1C;AACD;;AACD,UAAMY,QAAQ,GAAGZ,SAAS,CAACU,KAAV,CAAgBrB,UAAhB,CAAjB;;AACA,QAAIuB,QAAJ,EAAc;AACZZ,MAAAA,SAAS,GAAGA,SAAS,CAACW,OAAV,CAAkBC,QAAQ,CAAC,CAAD,CAA1B,EAAgC,QAAOnB,OAAQ,EAA/C,CAAZ;AACD,KAFD,MAEO;AACLO,MAAAA,SAAS,GAAI,QAAOP,OAAQ,KAAIO,SAAU,EAA1C;AACD;;AACD,UAAMhB,SAAS,CAACW,kBAAD,EAAqBK,SAArB,CAAf;AACAR,IAAAA,UAAU,CAACqB,OAAX,CAAmBC,GAAnB,GAAyBrB,OAAzB;AACAD,IAAAA,UAAU,CAACqB,OAAX,CAAmBE,GAAnB,GAAyBrB,OAAzB;AACAF,IAAAA,UAAU,CAACwB,iBAAX,GAA+B,IAA/B;AACD,GAxCD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst { readFile, writeFile } = require('fs-extra');\nconst getServerlessFilePath = require('../deployment/getServerlessFilePath');\n\nconst yamlExtensions = new Set(['.yml', '.yaml']);\n\nconst appPattern = /^(?:#\\s*)?app\\s*:.+/m;\nconst orgPattern = /^(?:#\\s*)?(?:tenant|org)\\s*:.+/m;\n\nmodule.exports = async (serverless, orgName, appName) => {\n  const serverlessFileName = await getServerlessFilePath(\n    serverless.processedInput.options.config,\n    serverless.config.servicePath\n  );\n\n  let ymlString = await (async () => {\n    if (!yamlExtensions.has(path.extname(serverlessFileName))) return null; // Non YAML config\n    try {\n      return await readFile(serverlessFileName);\n    } catch (error) {\n      if (error.code === 'ENOENT') return null;\n      throw error;\n    }\n  })();\n\n  if (!ymlString) {\n    process.stdout.write(\n      'Add the following settings to your serverless configuration file:\\n\\n' +\n        `org: ${orgName}\\napp: ${appName}\\n`\n    );\n    return;\n  }\n  ymlString = ymlString.toString();\n  const appMatch = ymlString.match(appPattern);\n  if (appMatch) {\n    ymlString = ymlString.replace(appMatch[0], `app: ${appName}`);\n  } else {\n    ymlString = `app: ${appName}\\n${ymlString}`;\n  }\n  const orgMatch = ymlString.match(orgPattern);\n  if (orgMatch) {\n    ymlString = ymlString.replace(orgMatch[0], `org: ${orgName}`);\n  } else {\n    ymlString = `org: ${orgName}\\n${ymlString}`;\n  }\n  await writeFile(serverlessFileName, ymlString);\n  serverless.service.org = orgName;\n  serverless.service.app = appName;\n  serverless.enterpriseEnabled = true;\n};\n"],"file":"writeOrgAndApp.js"}