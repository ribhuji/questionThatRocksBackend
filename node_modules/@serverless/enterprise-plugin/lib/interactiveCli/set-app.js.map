{"version":3,"sources":["../../../lib/interactiveCli/set-app.js"],"names":["_","require","chalk","createApp","createDeployProfile","getApps","getDeployProfiles","getLoggedInUser","getMetadata","listTenants","refreshToken","setDefaultDeploymentProfile","enableConfirm","writeOrgAndApp","resolveAccessKey","isValidAppName","RegExp","prototype","test","bind","orgUpdateConfirm","inquirer","process","stdout","write","prompt","message","type","name","shouldUpdateOrg","appUpdateConfirm","appName","orgName","choices","value","appUpdateType","orgsChoice","orgNames","Array","from","deployProfileChoice","deployProfiles","deploymentProfile","appNameChoice","appNames","concat","appNameInput","validate","input","trim","includes","newAppName","createAppWithDeploymentProfile","accessKey","tenant","app","token","length","deploymentProfileUid","map","find","steps","resolveOrgNames","user","orgs","Set","idToken","Object","keys","accessKeys","org","add","username","tenantName","setOrgAndApp","serverless","apps","interactiveCli","size","values","next","service","isDashboardMonitoringOverridenByCli","isDashboardAppPreconfigured","bold","shouldOverrideDashboardConfig","module","exports","check","config","servicePath","provider","supportedRegions","supportedRuntimes","runtime","getProvider","getRegion","has","processedInput","options","some","isDashboardMonitoringPreconfigured","red","run","appUpdateTypeChoice","Error"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst chalk = require('chalk');\nconst {\n  createApp,\n  createDeployProfile,\n  getApps,\n  getDeployProfiles,\n  getLoggedInUser,\n  getMetadata,\n  listTenants,\n  refreshToken,\n  setDefaultDeploymentProfile,\n} = require('@serverless/platform-sdk');\nconst enableConfirm = require('./enableConfirm');\nconst writeOrgAndApp = require('./writeOrgAndApp');\nconst { resolveAccessKey } = require('./utils');\n\nconst isValidAppName = RegExp.prototype.test.bind(/^[a-z0-9](?:[a-z0-9-]{0,126}[a-z0-9])?$/);\n\nconst orgUpdateConfirm = async (inquirer) => {\n  process.stdout.write(\n    \"Service has monitoring setup, but provided configuration doesn't seem to correspond\" +\n      \" to account you're logged in with.\\n\\n\"\n  );\n  return (\n    await inquirer.prompt({\n      message: 'Would you like to update it?',\n      type: 'confirm',\n      name: 'shouldUpdateOrg',\n    })\n  ).shouldUpdateOrg;\n};\nconst appUpdateConfirm = async (inquirer, appName, orgName) => {\n  process.stdout.write(\n    \"Service seems to have monitoring enabled, but configured app doesn't seem to exist in an organization.\\n\\n\"\n  );\n  return (\n    await inquirer.prompt({\n      message: 'What would you like to do?',\n      type: 'list',\n      name: 'appUpdateType',\n      choices: [\n        { name: `Create '${appName}' app in '${orgName}' org`, value: 'create' },\n        {\n          name: 'Switch to one of the existing apps (or create new one with different name)',\n          value: 'chooseExisting',\n        },\n        { name: \"Skip, I'll sort this out manually\", value: 'skip' },\n      ],\n    })\n  ).appUpdateType;\n};\n\nconst orgsChoice = async (inquirer, orgNames) =>\n  (\n    await inquirer.prompt({\n      message: 'What org do you want to add this to?',\n      type: 'list',\n      name: 'orgName',\n      choices: Array.from(orgNames),\n    })\n  ).orgName;\n\nconst deployProfileChoice = async (inquirer, deployProfiles) =>\n  (\n    await inquirer.prompt({\n      message: 'What deployment profile do you want to use?',\n      type: 'list',\n      name: 'deploymentProfile',\n      choices: Array.from(deployProfiles),\n    })\n  ).deploymentProfile;\n\nconst appNameChoice = async (inquirer, appNames) =>\n  (\n    await inquirer.prompt({\n      message: 'What application do you want to add this to?',\n      type: 'list',\n      name: 'appName',\n      choices: Array.from(appNames).concat({ name: '[create a new app]', value: '_create_' }),\n    })\n  ).appName;\n\nconst appNameInput = async (inquirer, appNames) =>\n  (\n    await inquirer.prompt({\n      message: 'What do you want to name this application?',\n      type: 'input',\n      name: 'newAppName',\n      validate: (input) => {\n        input = input.trim();\n        if (!isValidAppName(input)) {\n          return (\n            'App name is not valid.\\n' +\n            '   - It should only contain lowercase alphanumeric and hyphens.\\n' +\n            '   - It should start and end with an alphanumeric character.\\n' +\n            \"   - Shouldn't exceed 128 characters\"\n          );\n        }\n        if (appNames.includes(input)) return 'App of this name already exists';\n        return true;\n      },\n    })\n  ).newAppName.trim();\n\nconst createAppWithDeploymentProfile = async (inquirer, orgName, accessKey, newAppName) => {\n  const { appName } = await createApp({ tenant: orgName, app: newAppName, token: accessKey });\n\n  let deployProfiles = await getDeployProfiles({ tenant: orgName, accessKey });\n  let deploymentProfile;\n  if (deployProfiles.length === 0) {\n    await createDeployProfile({ name: 'default', tenant: orgName, accessKey });\n    deployProfiles = await getDeployProfiles({ tenant: orgName });\n  }\n  if (deployProfiles.length === 1) {\n    deploymentProfile = deployProfiles[0].deploymentProfileUid;\n  } else {\n    deploymentProfile = await deployProfileChoice(\n      inquirer,\n      deployProfiles.map(({ name }) => name)\n    );\n    deploymentProfile = _.find(deployProfiles, ({ name }) => name === deploymentProfile)\n      .deploymentProfileUid;\n  }\n  await setDefaultDeploymentProfile({\n    accessKey,\n    app: appName,\n    tenant: orgName,\n    deploymentProfile,\n  });\n  return appName;\n};\n\nconst steps = {\n  enableConfirm,\n  resolveOrgNames: async (user) => {\n    let orgs = new Set();\n    if (!user.idToken) {\n      // User registered over CLI hence idToken is not stored.\n      // Still to resolve organizations from platform idToken is needed.\n      // Handling it gently by assuming that orgs listed in config file\n      // make a valid representation\n      for (const org of Object.keys(user.accessKeys)) orgs.add(org);\n    } else {\n      await refreshToken();\n      user = getLoggedInUser();\n      orgs = new Set(\n        (await listTenants({ username: user.username, idToken: user.idToken })).map(\n          (org) => org.tenantName\n        )\n      );\n    }\n    return orgs;\n  },\n  setOrgAndApp: async (serverless, { user, orgNames, orgName, apps, appName, newAppName }) => {\n    const { inquirer } = serverless.interactiveCli;\n    if (!orgName) {\n      orgName = await (async () => {\n        if (orgNames.size === 1) return orgNames.values().next().value;\n        return orgsChoice(inquirer, orgNames);\n      })();\n    }\n\n    const accessKey = await resolveAccessKey(user, orgName);\n    if (!newAppName && !appName) {\n      if (!apps) apps = await getApps({ tenant: orgName, token: accessKey });\n\n      const appNames = apps.map((app) => app.appName);\n      appName = apps.length ? await appNameChoice(inquirer, appNames) : '_create_';\n      if (appName === '_create_') newAppName = await appNameInput(inquirer, appNames);\n    }\n    if (newAppName) {\n      appName = await createAppWithDeploymentProfile(inquirer, orgName, accessKey, newAppName);\n    }\n    if (\n      serverless.service.isDashboardMonitoringOverridenByCli &&\n      serverless.service.isDashboardAppPreconfigured\n    ) {\n      const { shouldOverrideDashboardConfig } = await inquirer.prompt({\n        message:\n          'Are you sure you want to update monitoring settings ' +\n          `to ${chalk.bold(`app: ${appName}, org: ${orgName}`)}`,\n        type: 'confirm',\n        name: 'shouldOverrideDashboardConfig',\n      });\n      if (!shouldOverrideDashboardConfig) {\n        delete serverless.service.app;\n        delete serverless.service.org;\n        return;\n      }\n    }\n    await writeOrgAndApp(serverless, orgName, appName);\n    return;\n  },\n};\n\nmodule.exports = {\n  async check(serverless) {\n    if (!serverless.config.servicePath) return false;\n    if (serverless.service.provider.name !== 'aws') return false;\n    const { supportedRegions, supportedRuntimes } = await getMetadata();\n    if (!supportedRuntimes.includes(serverless.service.provider.runtime || 'nodejs12.x')) {\n      return false;\n    }\n    if (!supportedRegions.includes(serverless.getProvider('aws').getRegion())) return false;\n\n    let user = getLoggedInUser();\n    if (!user) return false;\n\n    const orgNames = await steps.resolveOrgNames(user);\n    if (!orgNames.size) return false;\n    user = getLoggedInUser(); // Refreshed, as new token might have been generated\n\n    const orgName = serverless.service.org;\n    const appName = serverless.service.app;\n    if (orgName && orgNames.has(orgName)) {\n      const accessKey = await resolveAccessKey(user, orgName);\n      if (!isValidAppName(appName)) return { user, orgName };\n      const apps = await getApps({ tenant: orgName, token: accessKey });\n      if (serverless.processedInput.options.org || serverless.processedInput.options.app) {\n        if (apps.some((app) => app.appName === appName)) {\n          if (\n            serverless.service.isDashboardMonitoringPreconfigured &&\n            serverless.service.isDashboardAppPreconfigured &&\n            !serverless.service.isDashboardMonitoringOverridenByCli\n          ) {\n            return false;\n          }\n          return { user, orgName, appName };\n        }\n        if (serverless.processedInput.options.app) {\n          process.stdout.write(\n            chalk.red(\n              \"\\nPassed value for `--app` doesn't seem to correspond to chosen organization.\\n\"\n            )\n          );\n        }\n        return { user, orgName };\n      } else if (apps.some((app) => app.appName === appName)) {\n        return false;\n      }\n      return { user, orgName, apps, newAppName: appName };\n    } else if (orgName) {\n      if (serverless.processedInput.options.org) {\n        process.stdout.write(\n          chalk.red(\n            \"\\nPassed value for `--org` doesn't seem to correspond to account with which you're logged in with.\\n\"\n          )\n        );\n      } else {\n        process.stdout.write(\n          chalk.red(`\\nConfigured org '${orgName}' is not available in your account.\\n`)\n        );\n      }\n    }\n    return { user, orgNames };\n  },\n  async run(serverless, options) {\n    const { inquirer } = serverless.interactiveCli;\n    if (!options.orgName) delete serverless.service.org;\n    if (!options.appName && !options.newAppName) delete serverless.service.app;\n    if (!serverless.processedInput.options.org && !serverless.processedInput.options.app) {\n      if (serverless.service.isDashboardMonitoringPreconfigured) {\n        if (!options.orgName) {\n          if (!(await orgUpdateConfirm(inquirer))) return;\n        } else if (options.newAppName) {\n          const appUpdateTypeChoice = await appUpdateConfirm(\n            inquirer,\n            options.newAppName,\n            options.orgName\n          );\n          switch (appUpdateTypeChoice) {\n            case 'create':\n              break;\n            case 'chooseExisting':\n              delete options.newAppName;\n              break;\n            case 'skip':\n              return;\n            default:\n              throw new Error('Unexpected app update type');\n          }\n        } else if (!(await steps.enableConfirm(inquirer, serverless.processedInput.options))) {\n          return;\n        }\n      } else if (!(await steps.enableConfirm(inquirer, serverless.processedInput.options))) {\n        return;\n      }\n    }\n    await steps.setOrgAndApp(serverless, options);\n  },\n  steps,\n};\n"],"file":"set-app.js"}