{"version":3,"sources":["../../../lib/studio/ServerlessExec.js"],"names":["path","require","slsCommand","spawn","getDependencies","execOptions","env","process","SLS_DEV_MODE","cwd","stdio","ServerlessExec","constructor","stage","region","deployToStage","deployToRegion","functionToFilenames","info","filenameToFunctions","trackedFiles","output","stdoutBuffer","JSON","parse","toString","e","functions","Promise","all","Object","keys","map","functionName","handler","dir","name","handlerEntry","join","list","ignoreMissing","ignoreExternal","forEach","watchedFilename","funcs","Set","push","fetchEndpoints","endpoints","error","match","stringEndpoint","split","method","endpoint","console","deploy","deployArgs","splice","remove","invoke","invokeStudioEvent","payload","body","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst path = require('path');\n\nconst slsCommand = 'serverless';\n\nconst spawn = require('child-process-ext/spawn');\n\nconst getDependencies = require('ncjsm/get-dependencies');\n\nconst execOptions = {\n  env: {\n    ...process.env,\n    SLS_DEV_MODE: true,\n  },\n  cwd: process.cwd(),\n  stdio: 'inherit',\n};\n\nclass ServerlessExec {\n  constructor(stage, region) {\n    this.deployToStage = stage;\n    this.deployToRegion = region;\n    this.functionToFilenames = {};\n  }\n\n  async info() {\n    const filenameToFunctions = {};\n    const trackedFiles = [];\n\n    let output = {};\n\n    try {\n      /**\n       * Issue the --info variant of this command to get a parsed JSON output\n       * of the serverless.yml to determine HTTP endpoints\n       */\n      const { stdoutBuffer } = await spawn(slsCommand, [\n        'studio',\n        '--info',\n        `--stage=${this.deployToStage}`,\n        `--region=${this.deployToRegion}`,\n      ]);\n\n      output = JSON.parse(stdoutBuffer.toString());\n    } catch (e) {\n      /**\n       * If you ctrl+c during \"serverless dev --info\" to extract parsed\n       * yml information and HTTP endpoints, this will blow up. For now,\n       * just return some empty state objects so we can exit cleanly\n       * without an error.\n       */\n      return {\n        filenameToFunctions,\n        trackedFiles,\n        output,\n        functions: [],\n      };\n    }\n\n    const { functions } = output;\n\n    /**\n     * Use the handler path to reconstruct the path to the entry module\n     */\n    await Promise.all(\n      Object.keys(functions).map(async (functionName) => {\n        const { dir, name } = path.parse(functions[functionName].handler);\n        const handlerEntry = `${path.join(dir, name)}.js`;\n\n        /**\n         * Determine modules required by the entry point of the handler\n         */\n        const list = await getDependencies(handlerEntry, {\n          ignoreMissing: true,\n          ignoreExternal: true,\n        });\n\n        /**\n         * Store all files that make up this function\n         */\n        this.functionToFilenames[functionName] = list;\n\n        /**\n         * For convenience, map all watched modules to function(s)\n         */\n        list.forEach((watchedFilename) => {\n          /**\n           * Functions already mapped to this file\n           */\n          const funcs = filenameToFunctions[watchedFilename] || [];\n\n          filenameToFunctions[watchedFilename] = new Set([...funcs, functionName]);\n        });\n\n        trackedFiles.push(...list);\n      })\n    );\n\n    return {\n      filenameToFunctions,\n      trackedFiles,\n      output,\n      functions,\n    };\n  }\n\n  async fetchEndpoints() {\n    let endpoints = [];\n\n    /**\n     * Close your eyes.\n     *\n     * Call 'serverless info' here to get the endpoints and pull them out of the output, if there are any.\n     */\n    let stdoutBuffer;\n    try {\n      ({ stdoutBuffer } = await spawn(slsCommand, [\n        'info',\n        `--stage=${this.deployToStage}`,\n        `--region=${this.deployToRegion}`,\n      ]));\n    } catch (error) {\n      /**\n       * If we fail, it's probably because this this stage is not\n       * yet deployed.\n       */\n      return endpoints;\n    }\n    try {\n      endpoints = stdoutBuffer\n        .toString()\n        .match(/(ANY|GET|POST|PUT|PATCH|HEAD|OPTIONS|DELETE) - (.*)/g)\n        .map((stringEndpoint) => {\n          const [method, endpoint] = stringEndpoint.split(' - ');\n\n          return {\n            method,\n            endpoint,\n          };\n        });\n    } catch (e) {\n      console.error('ERROR parsing \"serverless info\"'); // eslint-disable-line no-console\n    }\n    return endpoints;\n  }\n\n  async deploy(functionName) {\n    const deployArgs = [\n      'deploy',\n      `--stage=${this.deployToStage}`,\n      `--region=${this.deployToRegion}`,\n    ];\n    if (functionName) {\n      deployArgs.splice(1, 0, 'function', `--function=${functionName}`);\n    }\n    await spawn(slsCommand, deployArgs, execOptions);\n  }\n\n  async remove() {\n    await spawn(\n      slsCommand,\n      ['remove', `--stage=${this.deployToStage}`, `--region=${this.deployToRegion}`],\n      execOptions\n    );\n  }\n\n  async invoke(invokeStudioEvent) {\n    const { functionName, payload } = invokeStudioEvent;\n\n    await spawn(\n      slsCommand,\n      [\n        'invoke',\n        `--stage=${this.deployToStage}`,\n        `--region=${this.deployToRegion}`,\n        `--function=${functionName}`,\n        `--data=${payload.body}`,\n      ],\n      execOptions\n    );\n  }\n}\n\nmodule.exports = ServerlessExec;\n"],"file":"ServerlessExec.js"}