{"version":3,"sources":["../../lib/setApiGatewayAccessLogFormat.js"],"names":["_","require","API_GATEWAY_LOG_FORMAT","API_GATEWAY_V2_LOG_FORMAT","setupHttpLogs","serviceConfig","provider","apiGateway","restApiId","logsConfig","logs","restApi","format","values","functions","some","functionData","events","event","http","isObject","JSON","stringify","setupHttpApiLogs","httpApi","id","module","exports","ctx","sls","service","custom","enterprise","collectApiGatewayLogs"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;iBAE8DA,OAAO,CAAC,YAAD,C;MAA7DC,sB,YAAAA,sB;MAAwBC,yB,YAAAA,yB;;AAEhC,MAAMC,aAAa,GAAIC,aAAD,IAAmB;AACvC,MAAIA,aAAa,CAACC,QAAd,CAAuBC,UAAvB,IAAqCF,aAAa,CAACC,QAAd,CAAuBC,UAAvB,CAAkCC,SAA3E,EAAsF;AACpF;AACA;AACD;;AAED,MAAIC,UAAU,GAAGJ,aAAa,CAACC,QAAd,CAAuBI,IAAxC;;AACA,MAAID,UAAU,IAAIA,UAAU,CAACE,OAAX,IAAsB,IAAxC,EAA8C;AAC5C;AACA,QAAI,CAACF,UAAU,CAACE,OAAhB,EAAyB;AACzB,QAAIF,UAAU,CAACE,OAAX,CAAmBC,MAAvB,EAA+B;AAChC;;AAED,MACE,CAACZ,CAAC,CAACa,MAAF,CAASR,aAAa,CAACS,SAAvB,EAAkCC,IAAlC,CAAwCC,YAAD,IACtCA,YAAY,CAACC,MAAb,CAAoBF,IAApB,CAA0BG,KAAD,IAAWA,KAAK,CAACC,IAA1C,CADD,CADH,EAIE;AACA;AACA;AACD;;AAED,MAAI,CAACV,UAAL,EAAiBA,UAAU,GAAGJ,aAAa,CAACC,QAAd,CAAuBI,IAAvB,GAA8B,EAA3C;AACjB,MAAI,CAACV,CAAC,CAACoB,QAAF,CAAWX,UAAU,CAACE,OAAtB,CAAL,EAAqCF,UAAU,CAACE,OAAX,GAAqB,EAArB;AACrCF,EAAAA,UAAU,CAACE,OAAX,CAAmBC,MAAnB,GAA4BS,IAAI,CAACC,SAAL,CAAepB,sBAAf,CAA5B;AACD,CAzBD;;AA2BA,MAAMqB,gBAAgB,GAAIlB,aAAD,IAAmB;AAC1C,MAAIA,aAAa,CAACC,QAAd,CAAuBkB,OAAvB,IAAkCnB,aAAa,CAACC,QAAd,CAAuBkB,OAAvB,CAA+BC,EAArE,EAAyE;AACvE;AACA;AACD;;AAED,MAAIhB,UAAU,GAAGJ,aAAa,CAACC,QAAd,CAAuBI,IAAxC;;AACA,MAAID,UAAU,IAAIA,UAAU,CAACe,OAAX,IAAsB,IAAxC,EAA8C;AAC5C;AACA,QAAI,CAACf,UAAU,CAACe,OAAhB,EAAyB;AACzB,QAAIf,UAAU,CAACe,OAAX,CAAmBZ,MAAvB,EAA+B;AAChC;;AAED,MACE,CAACZ,CAAC,CAACa,MAAF,CAASR,aAAa,CAACS,SAAvB,EAAkCC,IAAlC,CAAwCC,YAAD,IACtCA,YAAY,CAACC,MAAb,CAAoBF,IAApB,CAA0BG,KAAD,IAAWA,KAAK,CAACM,OAA1C,CADD,CADH,EAIE;AACA;AACA;AACD;;AAED,MAAI,CAACf,UAAL,EAAiBA,UAAU,GAAGJ,aAAa,CAACC,QAAd,CAAuBI,IAAvB,GAA8B,EAA3C;AACjB,MAAI,CAACV,CAAC,CAACoB,QAAF,CAAWX,UAAU,CAACe,OAAtB,CAAL,EAAqCf,UAAU,CAACe,OAAX,GAAqB,EAArB;AACrCf,EAAAA,UAAU,CAACe,OAAX,CAAmBZ,MAAnB,GAA4BS,IAAI,CAACC,SAAL,CAAenB,yBAAf,CAA5B;AACD,CAzBD;;AA2BAuB,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,QAAMvB,aAAa,GAAGuB,GAAG,CAACC,GAAJ,CAAQC,OAA9B;;AACA,MACEzB,aAAa,CAAC0B,MAAd,IACA1B,aAAa,CAAC0B,MAAd,CAAqBC,UADrB,IAEA3B,aAAa,CAAC0B,MAAd,CAAqBC,UAArB,CAAgCC,qBAAhC,KAA0D,KAH5D,EAIE;AACA;AACD;;AAED7B,EAAAA,aAAa,CAACC,aAAD,CAAb;AACAkB,EAAAA,gBAAgB,CAAClB,aAAD,CAAhB;AACD,CAZD","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst { API_GATEWAY_LOG_FORMAT, API_GATEWAY_V2_LOG_FORMAT } = require('./utils.js');\n\nconst setupHttpLogs = (serviceConfig) => {\n  if (serviceConfig.provider.apiGateway && serviceConfig.provider.apiGateway.restApiId) {\n    // Do not proceed if events reference Rest API configured externally\n    return;\n  }\n\n  let logsConfig = serviceConfig.provider.logs;\n  if (logsConfig && logsConfig.restApi != null) {\n    // Ensure to not override eventual specified logs configuration\n    if (!logsConfig.restApi) return;\n    if (logsConfig.restApi.format) return;\n  }\n\n  if (\n    !_.values(serviceConfig.functions).some((functionData) =>\n      functionData.events.some((event) => event.http)\n    )\n  ) {\n    // Do not proceed if there are no `http` events\n    return;\n  }\n\n  if (!logsConfig) logsConfig = serviceConfig.provider.logs = {};\n  if (!_.isObject(logsConfig.restApi)) logsConfig.restApi = {};\n  logsConfig.restApi.format = JSON.stringify(API_GATEWAY_LOG_FORMAT);\n};\n\nconst setupHttpApiLogs = (serviceConfig) => {\n  if (serviceConfig.provider.httpApi && serviceConfig.provider.httpApi.id) {\n    // Do not proceed if events reference HTTP API configured externally\n    return;\n  }\n\n  let logsConfig = serviceConfig.provider.logs;\n  if (logsConfig && logsConfig.httpApi != null) {\n    // Ensure to not override eventual specified logs configuration\n    if (!logsConfig.httpApi) return;\n    if (logsConfig.httpApi.format) return;\n  }\n\n  if (\n    !_.values(serviceConfig.functions).some((functionData) =>\n      functionData.events.some((event) => event.httpApi)\n    )\n  ) {\n    // Do not proceed if there are no `httpApi` events\n    return;\n  }\n\n  if (!logsConfig) logsConfig = serviceConfig.provider.logs = {};\n  if (!_.isObject(logsConfig.httpApi)) logsConfig.httpApi = {};\n  logsConfig.httpApi.format = JSON.stringify(API_GATEWAY_V2_LOG_FORMAT);\n};\n\nmodule.exports = (ctx) => {\n  const serviceConfig = ctx.sls.service;\n  if (\n    serviceConfig.custom &&\n    serviceConfig.custom.enterprise &&\n    serviceConfig.custom.enterprise.collectApiGatewayLogs === false\n  ) {\n    return;\n  }\n\n  setupHttpLogs(serviceConfig);\n  setupHttpApiLogs(serviceConfig);\n};\n"],"file":"setApiGatewayAccessLogFormat.js"}