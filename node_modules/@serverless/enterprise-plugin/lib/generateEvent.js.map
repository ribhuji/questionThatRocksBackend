{"version":3,"sources":["../../lib/generateEvent.js"],"names":["createEvent","require","default","zlib","hasOwnProperty","Object","prototype","recordWrapper","event","Records","encodeBody","body","Buffer","from","toString","gzipBody","Promise","res","rej","gzip","error","result","parsedBody","JSON","parse","eventDict","Sns","Message","dynamodb","kinesis","data","awslogs","wrapEvent","eventType","call","Error","generate","ctx","options","sls","processedInput","undefined","type","console","log","stringify","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst createEvent = require('@serverless/event-mocks').default;\nconst zlib = require('zlib');\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction recordWrapper(event) {\n  return {\n    Records: [event],\n  };\n}\n\nfunction encodeBody(body) {\n  if (!body) return body;\n  return Buffer.from(body).toString('base64');\n}\n\nasync function gzipBody(body) {\n  return new Promise((res, rej) => {\n    zlib.gzip(body, (error, result) => {\n      if (error) {\n        rej(error);\n      } else {\n        res(result);\n      }\n    });\n  });\n}\n\nfunction parsedBody(body) {\n  return JSON.parse(body);\n}\n\nconst eventDict = {\n  'aws:apiGateway': (body) => ({ body }),\n  'aws:sns': (body) => recordWrapper({ Sns: { Message: body } }),\n  'aws:sqs': (body) => recordWrapper({ body }),\n  'aws:dynamo': (body) => recordWrapper({ dynamodb: body }),\n  'aws:kinesis': (body) =>\n    recordWrapper({\n      kinesis: { data: encodeBody(body) },\n    }),\n  'aws:cloudWatchLog': async (body) => ({\n    awslogs: { data: encodeBody(await gzipBody(body)) },\n  }),\n  'aws:s3': () => ({}),\n  'aws:alexaSmartHome': (body) => parsedBody(body),\n  'aws:alexaSkill': (body) => parsedBody(body),\n  'aws:cloudWatch': (body) => parsedBody(body),\n  'aws:iot': (body) => parsedBody(body),\n  'aws:cognitoUserPool': (body) => parsedBody(body),\n  'aws:websocket': (body) => ({ body }),\n};\n\nasync function wrapEvent(eventType, body) {\n  if (hasOwnProperty.call(eventDict, eventType)) {\n    return createEvent(eventType, await eventDict[eventType](body));\n  }\n\n  throw new Error('Invalid event specified.');\n}\n\nconst generate = async function (ctx) {\n  const { options } = ctx.sls.processedInput;\n  const body = options.body === undefined ? '{}' : options.body;\n  const event = await wrapEvent(options.type, body);\n  // eslint-disable-next-line no-console\n  return console.log(JSON.stringify(event));\n};\n\nmodule.exports = {\n  generate,\n  eventDict,\n};\n"],"file":"generateEvent.js"}