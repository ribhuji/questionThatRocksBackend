{"version":3,"sources":["../../../../lib/safeguards/policies/allowed-regions.js"],"names":["module","exports","allowedRegionsPolicy","policy","service","options","region","provider","getRegion","includes","fail","JSON","stringify","approve","docs"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,oBAAT,CAA8BC,MAA9B,EAAsCC,OAAtC,EAA+CC,OAA/C,EAAwD;AACvE,QAAMC,MAAM,GAAGF,OAAO,CAACG,QAAR,CAAiBC,SAAjB,EAAf;;AACA,MAAI,CAACH,OAAO,CAACI,QAAR,CAAiBH,MAAjB,CAAL,EAA+B;AAC7BH,IAAAA,MAAM,CAACO,IAAP,CAAa,WAAUJ,MAAO,uCAAsCK,IAAI,CAACC,SAAL,CAAeP,OAAf,CAAwB,EAA5F;AACD,GAFD,MAEO;AACLF,IAAAA,MAAM,CAACU,OAAP;AACD;AACF,CAPD;;AASAb,MAAM,CAACC,OAAP,CAAea,IAAf,GAAsB,mCAAtB","sourcesContent":["'use strict';\n\nmodule.exports = function allowedRegionsPolicy(policy, service, options) {\n  const region = service.provider.getRegion();\n  if (!options.includes(region)) {\n    policy.fail(`Region \"${region}\" not in list of permitted regions: ${JSON.stringify(options)}`);\n  } else {\n    policy.approve();\n  }\n};\n\nmodule.exports.docs = 'http://slss.io/sg-allowed-regions';\n"],"file":"allowed-regions.js"}