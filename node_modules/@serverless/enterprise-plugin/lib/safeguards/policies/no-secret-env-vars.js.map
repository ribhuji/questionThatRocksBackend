{"version":3,"sources":["../../../../lib/safeguards/policies/no-secret-env-vars.js"],"names":["require","entries","fromPairs","values","truffleHogRegexes","RegExp","isSecret","string","regex","test","module","exports","noSecretEnvVarsPolicy","policy","service","failed","functions","declaration","naming","provider","Resources","compiled","logicalFuncNamesToConfigFuncName","Object","keys","map","funcName","getLambdaLogicalId","Properties","Type","Environment","Variables","name","value","configFuncName","fail","approve","docs"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { entries, fromPairs, values } = require('lodash');\n\n// from https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json\nconst truffleHogRegexes = {\n  'Slack Token': new RegExp('(xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})'),\n  'RSA private key': new RegExp('-----BEGIN RSA PRIVATE KEY-----'),\n  'SSH (OPENSSH) private key': new RegExp('-----BEGIN OPENSSH PRIVATE KEY-----'),\n  'SSH (DSA) private key': new RegExp('-----BEGIN DSA PRIVATE KEY-----'),\n  'SSH (EC) private key': new RegExp('-----BEGIN EC PRIVATE KEY-----'),\n  'PGP private key block': new RegExp('-----BEGIN PGP PRIVATE KEY BLOCK-----'),\n  'Facebook Oauth': new RegExp(\n    '[f|F][a|A][c|C][e|E][b|B][o|O][o|O][k|K].*[\\'|\"][0-9a-f]{32}[\\'|\"]'\n  ),\n  'Twitter Oauth': new RegExp(\n    '[t|T][w|W][i|I][t|T][t|T][e|E][r|R].*[\\'|\"][0-9a-zA-Z]{35,44}[\\'|\"]'\n  ),\n  'GitHub': new RegExp('[g|G][i|I][t|T][h|H][u|U][b|B].*[\\'|\"][0-9a-zA-Z]{35,40}[\\'|\"]'),\n  'Google Oauth': new RegExp('(\"client_secret\":\"[a-zA-Z0-9-_]{24}\")'),\n  'AWS API Key': new RegExp('AKIA[0-9A-Z]{16}'),\n  'Heroku API Key': new RegExp(\n    '[h|H][e|E][r|R][o|O][k|K][u|U].*[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}'\n  ),\n  'Generic Secret': new RegExp('[s|S][e|E][c|C][r|R][e|E][t|T].*[\\'|\"][0-9a-zA-Z]{32,45}[\\'|\"]'),\n  'Generic API Key': new RegExp(\n    '[a|A][p|P][i|I][_]?[k|K][e|E][y|Y].*[\\'|\"][0-9a-zA-Z]{32,45}[\\'|\"]'\n  ),\n  'Slack Webhook': new RegExp(\n    'https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}'\n  ),\n  'Google (GCP) Service-account': new RegExp('\"type\": \"service_account\"'),\n  'Twilio API Key': new RegExp('SK[a-z0-9]{32}'),\n  'Password in URL': new RegExp(\n    '[a-zA-Z]{3,10}://[^/\\\\s:@]{3,20}:[^/\\\\s:@]{3,20}@.{1,100}[\"\\'\\\\s]'\n  ),\n};\nfunction isSecret(string) {\n  for (const regex of values(truffleHogRegexes)) {\n    if (regex.test(string)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = function noSecretEnvVarsPolicy(policy, service) {\n  let failed = false;\n  const {\n    declaration: { functions },\n    provider: { naming },\n    compiled: {\n      'cloudformation-template-update-stack.json': { Resources },\n    },\n  } = service;\n  const logicalFuncNamesToConfigFuncName = fromPairs(\n    Object.keys(functions || {}).map((funcName) => [naming.getLambdaLogicalId(funcName), funcName])\n  );\n\n  for (const [funcName, { Properties, Type }] of entries(Resources)) {\n    if (\n      Type !== 'AWS::Lambda::Function' ||\n      !Properties.Environment ||\n      !Properties.Environment.Variables\n    ) {\n      continue;\n    }\n\n    for (const [name, value] of entries(Properties.Environment.Variables)) {\n      if (isSecret(value)) {\n        const configFuncName = logicalFuncNamesToConfigFuncName[funcName] || funcName;\n        failed = true;\n        policy.fail(\n          `Environment variable ${name} on function '${\n            configFuncName || funcName\n          }' looks like it contains a secret value`\n        );\n      }\n    }\n  }\n\n  if (!failed) {\n    policy.approve();\n  }\n};\n\nmodule.exports.docs = 'http://slss.io/sg-no-secret-env-vars';\n"],"file":"no-secret-env-vars.js"}