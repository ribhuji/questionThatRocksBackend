{"version":3,"sources":["../../../../lib/safeguards/policies/restricted-deploy-times.js"],"names":["moment","require","parse","module","exports","restrictedDeployTimesPolicy","policy","service","options","now","Array","isArray","time","duration","interval","isBefore","end","clone","add","isAfter","fail","format","approve","docs"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;iBACkBA,OAAO,CAAC,kBAAD,C;MAAjBC,K,YAAAA,K;;AAERC,MAAM,CAACC,OAAP,GAAiB,SAASC,2BAAT,CAAqCC,MAArC,EAA6CC,OAA7C,EAAsDC,OAAO,GAAG,EAAhE,EAAoE;AACnF,QAAMC,GAAG,GAAGT,MAAM,EAAlB;;AADmF,6CAG1CU,KAAK,CAACC,OAAN,CAAcH,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAHO;AAAA;;AAAA;AAGnF,wDAAuF;AAAA;AAAA,UAA5EI,IAA4E,eAA5EA,IAA4E;AAAA,UAAtEC,QAAsE,eAAtEA,QAAsE;AAAA,UAA5DC,QAA4D,eAA5DA,QAA4D;AACrFF,MAAAA,IAAI,GAAGZ,MAAM,CAACY,IAAD,CAAb;AACAC,MAAAA,QAAQ,GAAGb,MAAM,CAACa,QAAP,CAAgBX,KAAK,CAACW,QAAD,CAArB,CAAX;AACAC,MAAAA,QAAQ,GAAGA,QAAQ,IAAId,MAAM,CAACa,QAAP,CAAgBX,KAAK,CAACY,QAAD,CAArB,CAAvB;;AAEA,aAAOF,IAAI,CAACG,QAAL,CAAcN,GAAd,CAAP,EAA2B;AACzB,cAAMO,GAAG,GAAGJ,IAAI,CAACK,KAAL,EAAZ;AACAD,QAAAA,GAAG,CAACE,GAAJ,CAAQL,QAAR;;AACA,YAAIG,GAAG,CAACG,OAAJ,CAAYV,GAAZ,CAAJ,EAAsB;AACpBH,UAAAA,MAAM,CAACc,IAAP,CAAa,gBAAeX,GAAG,CAACY,MAAJ,CAAW,YAAX,CAAyB,iBAArD;AACA;AACD;;AACD,YAAIP,QAAJ,EAAc;AACZF,UAAAA,IAAI,CAACM,GAAL,CAASJ,QAAT;AACD,SAFD,MAEO;AACL;AACD;AACF;AACF;AArBkF;AAAA;AAAA;AAAA;AAAA;;AAsBnFR,EAAAA,MAAM,CAACgB,OAAP;AACD,CAvBD;;AAyBAnB,MAAM,CAACC,OAAP,CAAemB,IAAf,GAAsB,gCAAtB","sourcesContent":["'use strict';\n\nconst moment = require('moment');\nconst { parse } = require('iso8601-duration');\n\nmodule.exports = function restrictedDeployTimesPolicy(policy, service, options = []) {\n  const now = moment();\n\n  for (let { time, duration, interval } of Array.isArray(options) ? options : [options]) {\n    time = moment(time);\n    duration = moment.duration(parse(duration));\n    interval = interval && moment.duration(parse(interval));\n\n    while (time.isBefore(now)) {\n      const end = time.clone();\n      end.add(duration);\n      if (end.isAfter(now)) {\n        policy.fail(`Deploying on ${now.format('YYYY-MM-DD')} is not allowed`);\n        return;\n      }\n      if (interval) {\n        time.add(interval);\n      } else {\n        break;\n      }\n    }\n  }\n  policy.approve();\n};\n\nmodule.exports.docs = 'http://slss.io/sg-deploy-times';\n"],"file":"restricted-deploy-times.js"}