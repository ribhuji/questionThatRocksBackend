{"version":3,"sources":["../../../../lib/safeguards/policies/require-global-vpc.js"],"names":["require","entries","fromPairs","module","exports","requireGlobalVpcPolicy","policy","service","minNumSubnets","failed","functions","declaration","naming","provider","Resources","compiled","logicalFuncNamesToConfigFuncName","Object","keys","map","funcName","getLambdaLogicalId","VpcConfig","Properties","Type","SecurityGroupIds","SubnetIds","fail","length","approve","docs"],"mappings":"AAAA;;;;;;;;;;;;;;;;iBAE+BA,OAAO,CAAC,QAAD,C;MAA9BC,O,YAAAA,O;MAASC,S,YAAAA,S;;AAEjBC,MAAM,CAACC,OAAP,GAAiB,SAASC,sBAAT,CACfC,MADe,EAEfC,OAFe,EAGf;AAAEC,EAAAA;AAAF,IAAoB;AAAEA,EAAAA,aAAa,EAAE;AAAjB,CAHL,EAIf;AACA,MAAIC,MAAM,GAAG,KAAb;AADA,QAGiBC,SAHjB,GAQIH,OARJ,CAGEI,WAHF,CAGiBD,SAHjB;AAAA,QAIcE,MAJd,GAQIL,OARJ,CAIEM,QAJF,CAIcD,MAJd;AAAA,QAMmDE,SANnD,GAQIP,OARJ,CAKEQ,QALF,CAMI,2CANJ,EAMmDD,SANnD;AASA,QAAME,gCAAgC,GAAGd,SAAS,CAChDe,MAAM,CAACC,IAAP,CAAYR,SAAS,IAAI,EAAzB,EAA6BS,GAA7B,CAAkCC,QAAD,IAAc,CAACR,MAAM,CAACS,kBAAP,CAA0BD,QAA1B,CAAD,EAAsCA,QAAtC,CAA/C,CADgD,CAAlD;;AATA,6CAmBKnB,OAAO,CAACa,SAAD,CAnBZ;AAAA;;AAAA;AAaA,wDAMyB;AAAA;AAAA,YALvBM,QAKuB;AAAA;AAAA,YAHPE,SAGO,gBAHrBC,UAGqB,CAHPD,SAGO;AAAA,YAFrBE,IAEqB,gBAFrBA,IAEqB;;AACvB,UAAIA,IAAI,KAAK,uBAAb,EAAsC;AACpC;AACD;;AACD,UAAI,CAACF,SAAD,IAAc,CAACA,SAAS,CAACG,gBAAzB,IAA6C,CAACH,SAAS,CAACI,SAA5D,EAAuE;AACrEjB,QAAAA,MAAM,GAAG,IAAT;AACAH,QAAAA,MAAM,CAACqB,IAAP,CACG,aACCX,gCAAgC,CAACI,QAAD,CAAhC,IAA8CA,QAC/C,2CAHH;AAKD,OAPD,MAOO,IAAIE,SAAS,CAACI,SAAV,CAAoBE,MAApB,GAA6BpB,aAAjC,EAAgD;AACrDC,QAAAA,MAAM,GAAG,IAAT;AACAH,QAAAA,MAAM,CAACqB,IAAP,CACG,aACCX,gCAAgC,CAACI,QAAD,CAAhC,IAA8CA,QAC/C,4DAA2DZ,aAAc,WAH5E;AAKD;AACF;AAtCD;AAAA;AAAA;AAAA;AAAA;;AAwCA,MAAI,CAACC,MAAL,EAAa;AACXH,IAAAA,MAAM,CAACuB,OAAP;AACD;AACF,CA/CD;;AAiDA1B,MAAM,CAACC,OAAP,CAAe0B,IAAf,GAAsB,sCAAtB","sourcesContent":["'use strict';\n\nconst { entries, fromPairs } = require('lodash');\n\nmodule.exports = function requireGlobalVpcPolicy(\n  policy,\n  service,\n  { minNumSubnets } = { minNumSubnets: 2 }\n) {\n  let failed = false;\n  const {\n    declaration: { functions },\n    provider: { naming },\n    compiled: {\n      'cloudformation-template-update-stack.json': { Resources },\n    },\n  } = service;\n  const logicalFuncNamesToConfigFuncName = fromPairs(\n    Object.keys(functions || {}).map((funcName) => [naming.getLambdaLogicalId(funcName), funcName])\n  );\n\n  for (const [\n    funcName,\n    {\n      Properties: { VpcConfig },\n      Type,\n    },\n  ] of entries(Resources)) {\n    if (Type !== 'AWS::Lambda::Function') {\n      continue;\n    }\n    if (!VpcConfig || !VpcConfig.SecurityGroupIds || !VpcConfig.SubnetIds) {\n      failed = true;\n      policy.fail(\n        `Function \"${\n          logicalFuncNamesToConfigFuncName[funcName] || funcName\n        }\" doesn't satisfy global VPC requirement.`\n      );\n    } else if (VpcConfig.SubnetIds.length < minNumSubnets) {\n      failed = true;\n      policy.fail(\n        `Function \"${\n          logicalFuncNamesToConfigFuncName[funcName] || funcName\n        }\" doesn't satisfy the global VPC requirement of at least ${minNumSubnets} subnets.`\n      );\n    }\n  }\n\n  if (!failed) {\n    policy.approve();\n  }\n};\n\nmodule.exports.docs = 'http://slss.io/sg-require-global-vpc';\n"],"file":"require-global-vpc.js"}