{"version":3,"sources":["../../../../lib/safeguards/policies/javascript.js"],"names":["jsonataQuery","require","vm","execStatement","service","statement","jsonata","queryStatement","expression","value","evaluate","Array","isArray","length","Object","keys","Boolean","sandbox","createContext","runInContext","module","exports","javascriptPolicy","policy","options","JSON","parse","response","ex","fail","approve","docs"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAME,aAAa,GAAG,CAACC,OAAD,EAAUC,SAAV,KAAwB;AAC5C,QAAMC,OAAO,GAAIC,cAAD,IAAoB;AAClC,UAAMC,UAAU,GAAGR,YAAY,CAACO,cAAD,CAA/B;AACA,UAAME,KAAK,GAAGD,UAAU,CAACE,QAAX,CAAoBN,OAApB,CAAd;;AACA,QAAIO,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxB,aAAOA,KAAK,CAACI,MAAN,GAAe,CAAtB;AACD,KAFD,MAEO,IAAI,OAAOJ,KAAP,KAAiB,QAArB,EAA+B;AACpC,aAAOK,MAAM,CAACC,IAAP,CAAYN,KAAZ,EAAmBI,MAAnB,GAA4B,CAAnC;AACD;;AACD,WAAOG,OAAO,CAACP,KAAD,CAAd;AACD,GATD;;AAWA,QAAMQ,OAAO;AACXX,IAAAA;AADW,KAERF,OAFQ,CAAb;;AAKAF,EAAAA,EAAE,CAACgB,aAAH,CAAiBD,OAAjB;AAEA,SAAOf,EAAE,CAACiB,YAAH,CAAgBd,SAAhB,EAA2BY,OAA3B,CAAP;AACD,CApBD;;AAsBAG,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCnB,OAAlC,EAA2CoB,OAA3C,EAAoD;AACnE,QAAMnB,SAAS,GAAGoB,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAlB;AACA,MAAIG,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAGxB,aAAa,CAACC,OAAD,EAAUC,SAAV,CAAxB;AACD,GAFD,CAEE,OAAOuB,EAAP,EAAW;AACXL,IAAAA,MAAM,CAACM,IAAP,CAAa,mCAAkCxB,SAAU,GAAzD;AACA;AACD;;AACD,MAAI,CAACsB,QAAL,EAAe;AACbJ,IAAAA,MAAM,CAACM,IAAP,CAAY,iDAAZ;AACA;AACD;;AACDN,EAAAA,MAAM,CAACO,OAAP;AACD,CAdD;;AAgBAV,MAAM,CAACC,OAAP,CAAeU,IAAf,GAAsB,iCAAtB","sourcesContent":["'use strict';\n\nconst jsonataQuery = require('jsonata');\nconst vm = require('vm');\n\nconst execStatement = (service, statement) => {\n  const jsonata = (queryStatement) => {\n    const expression = jsonataQuery(queryStatement);\n    const value = expression.evaluate(service);\n    if (Array.isArray(value)) {\n      return value.length > 0;\n    } else if (typeof value === 'object') {\n      return Object.keys(value).length > 0;\n    }\n    return Boolean(value);\n  };\n\n  const sandbox = {\n    jsonata,\n    ...service,\n  };\n\n  vm.createContext(sandbox);\n\n  return vm.runInContext(statement, sandbox);\n};\n\nmodule.exports = function javascriptPolicy(policy, service, options) {\n  const statement = JSON.parse(options);\n  let response;\n  try {\n    response = execStatement(service, statement);\n  } catch (ex) {\n    policy.fail(`Error in the policy statement: \"${statement}\"`);\n    return;\n  }\n  if (!response) {\n    policy.fail('Must comply with all of the configured queries.');\n    return;\n  }\n  policy.approve();\n};\n\nmodule.exports.docs = 'http://slss.io/sg-custom-policy';\n"],"file":"javascript.js"}