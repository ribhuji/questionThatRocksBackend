{"version":3,"sources":["../../../../lib/safeguards/policies/require-description.js"],"names":["require","entries","fromPairs","module","exports","requireDescriptionPolicy","policy","service","options","failed","functions","declaration","naming","provider","Resources","compiled","logicalFuncNamesToConfigFuncName","Object","keys","map","funcName","getLambdaLogicalId","Properties","Type","Description","fail","length","maxLength","minLength","approve","docs"],"mappings":"AAAA;;;;;;;;;;;;;;;;iBAE+BA,OAAO,CAAC,QAAD,C;MAA9BC,O,YAAAA,O;MAASC,S,YAAAA,S;;AAEjBC,MAAM,CAACC,OAAP,GAAiB,SAASC,wBAAT,CAAkCC,MAAlC,EAA0CC,OAA1C,EAAmDC,OAAnD,EAA4D;AAC3E,MAAIC,MAAM,GAAG,KAAb;AAD2E,QAG1DC,SAH0D,GAQvEH,OARuE,CAGzEI,WAHyE,CAG1DD,SAH0D;AAAA,QAI7DE,MAJ6D,GAQvEL,OARuE,CAIzEM,QAJyE,CAI7DD,MAJ6D;AAAA,QAMxBE,SANwB,GAQvEP,OARuE,CAKzEQ,QALyE,CAMvE,2CANuE,EAMxBD,SANwB;AAS3E,QAAME,gCAAgC,GAAGd,SAAS,CAChDe,MAAM,CAACC,IAAP,CAAYR,SAAS,IAAI,EAAzB,EAA6BS,GAA7B,CAAkCC,QAAD,IAAc,CAACR,MAAM,CAACS,kBAAP,CAA0BD,QAA1B,CAAD,EAAsCA,QAAtC,CAA/C,CADgD,CAAlD;;AAT2E,6CAa5BnB,OAAO,CAACa,SAAD,CAbqB;AAAA;;AAAA;AAa3E,wDAAmE;AAAA;AAAA,YAAvDM,QAAuD;AAAA;AAAA,YAA3CE,UAA2C,gBAA3CA,UAA2C;AAAA,YAA/BC,IAA+B,gBAA/BA,IAA+B;;AACjE,UAAIA,IAAI,KAAK,uBAAb,EAAsC;AACpC;AACD;;AACD,UAAI,CAACD,UAAU,CAACE,WAAhB,EAA6B;AAC3Bf,QAAAA,MAAM,GAAG,IAAT;AACAH,QAAAA,MAAM,CAACmB,IAAP,CACG,aAAYT,gCAAgC,CAACI,QAAD,CAAhC,IAA8CA,QAAS,sBADtE;AAGD,OALD,MAKO;AACL,YAAIE,UAAU,CAACE,WAAX,CAAuBE,MAAvB,IAAkClB,OAAO,IAAIA,OAAO,CAACmB,SAApB,IAAkC,GAAnE,CAAJ,EAA6E;AAC3ElB,UAAAA,MAAM,GAAG,IAAT;AACAH,UAAAA,MAAM,CAACmB,IAAP,CACG,6BACCT,gCAAgC,CAACI,QAAD,CAAhC,IAA8CA,QAC/C,eAHH;AAKD;;AACD,YAAIE,UAAU,CAACE,WAAX,CAAuBE,MAAvB,IAAkClB,OAAO,IAAIA,OAAO,CAACoB,SAApB,IAAkC,EAAnE,CAAJ,EAA4E;AAC1EnB,UAAAA,MAAM,GAAG,IAAT;AACAH,UAAAA,MAAM,CAACmB,IAAP,CACG,6BACCT,gCAAgC,CAACI,QAAD,CAAhC,IAA8CA,QAC/C,gBAHH;AAKD;AACF;AACF;AAxC0E;AAAA;AAAA;AAAA;AAAA;;AA0C3E,MAAI,CAACX,MAAL,EAAa;AACXH,IAAAA,MAAM,CAACuB,OAAP;AACD;AACF,CA7CD;;AA+CA1B,MAAM,CAACC,OAAP,CAAe0B,IAAf,GAAsB,gCAAtB","sourcesContent":["'use strict';\n\nconst { entries, fromPairs } = require('lodash');\n\nmodule.exports = function requireDescriptionPolicy(policy, service, options) {\n  let failed = false;\n  const {\n    declaration: { functions },\n    provider: { naming },\n    compiled: {\n      'cloudformation-template-update-stack.json': { Resources },\n    },\n  } = service;\n  const logicalFuncNamesToConfigFuncName = fromPairs(\n    Object.keys(functions || {}).map((funcName) => [naming.getLambdaLogicalId(funcName), funcName])\n  );\n\n  for (const [funcName, { Properties, Type }] of entries(Resources)) {\n    if (Type !== 'AWS::Lambda::Function') {\n      continue;\n    }\n    if (!Properties.Description) {\n      failed = true;\n      policy.fail(\n        `Function \"${logicalFuncNamesToConfigFuncName[funcName] || funcName}\" has no description`\n      );\n    } else {\n      if (Properties.Description.length > ((options && options.maxLength) || 256)) {\n        failed = true;\n        policy.fail(\n          `Description for function \"${\n            logicalFuncNamesToConfigFuncName[funcName] || funcName\n          }\" is too long`\n        );\n      }\n      if (Properties.Description.length < ((options && options.minLength) || 30)) {\n        failed = true;\n        policy.fail(\n          `Description for function \"${\n            logicalFuncNamesToConfigFuncName[funcName] || funcName\n          }\" is too short`\n        );\n      }\n    }\n  }\n\n  if (!failed) {\n    policy.approve();\n  }\n};\n\nmodule.exports.docs = 'http://slss.io/sg-require-desc';\n"],"file":"require-description.js"}