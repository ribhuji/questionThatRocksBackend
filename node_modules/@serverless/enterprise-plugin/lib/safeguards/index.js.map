{"version":3,"sources":["../../../lib/safeguards/index.js"],"names":["require","readdir","readFile","yml","path","get","fromPairs","cloneDeep","omit","chalk","loadPolicy","policyPath","safeguardName","runPolicies","ctx","basePath","sls","config","servicePath","service","Array","isArray","plugins","includes","logDeprecation","join","location","localPoliciesPath","relative","__dirname","resolve","startsWith","sep","localPolicies","map","policy","safeguardConfig","Object","policyObjKeys","keys","length","Error","enforcementLevel","title","policyConfigs","safeguards","cli","log","policies","function","compiled","declaration","provider","frameworkVersion","version","artifactsPath","artifacts","jsonYamlArtifacts","Promise","all","filter","filename","match","content","JSON","parse","error","runningPolicies","process","stdout","write","result","approved","failed","approve","green","fail","message","errorWord","color","red","keyword","policyHandle","state","safeguardsResults","markedPolicies","res","warned","passed","summary","resolveMessage","details","yellow","i","grey","docs","description","every","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { readdir, readFile } = require('fs-extra');\nconst yml = require('yamljs');\nconst path = require('path');\nconst { get, fromPairs, cloneDeep, omit } = require('lodash');\nconst chalk = require('chalk');\n\n// NOTE: not using path.join because it strips off the leading\nconst loadPolicy = (policyPath, safeguardName) =>\n  require(`${policyPath || './policies'}/${safeguardName}`);\n\nasync function runPolicies(ctx) {\n  const basePath = ctx.sls.config.servicePath;\n\n  if (get(ctx.sls.service, 'custom.safeguards.isDisabled')) return;\n  if (\n    Array.isArray(ctx.sls.service.plugins) &&\n    ctx.sls.service.plugins.includes('@serverless/safeguards-plugin')\n  ) {\n    return;\n  }\n  if (ctx.sls.logDeprecation) {\n    ctx.sls.logDeprecation(\n      'DASHBOARD_SAFEGUARDS',\n      [\n        'Safeguards support has been moved to the @serverless/safeguards-plugin external plugin and will be removed from the core with next major release.',\n        '',\n        'Please visit https://github.com/serverless/safeguards-plugin/ to migrate your safeguards to the new plugin.',\n        'You may also disable safeguards by setting \"custom.safeguards.isDisabled: true\" in service config',\n        '',\n      ].join('\\n')\n    );\n  }\n\n  const location = get(ctx.sls.service, 'custom.safeguards.location', '.');\n  let localPoliciesPath = path.relative(__dirname, path.resolve(basePath, location));\n  if (!localPoliciesPath.startsWith('.')) {\n    localPoliciesPath = `.${path.sep}${localPoliciesPath}`;\n  }\n  // using || [] instead of _.get's default bc if it's falsey we want it to be []\n  const localPolicies = get(ctx.sls.service, 'custom.safeguards.policies', []).map((policy) => {\n    let safeguardName = policy;\n    let safeguardConfig = {};\n    if (policy instanceof Object) {\n      const policyObjKeys = Object.keys(policy);\n      if (policyObjKeys.length !== 1) {\n        throw new Error(\n          'Safeguards requires that each item in the policies list be either a string indicating a policy name, or else an object with a single key specifying the policy name with the policy options. One or more items were objects containing multiple keys. Correct these entries and try again.'\n        );\n      }\n      safeguardName = policyObjKeys[0];\n      safeguardConfig = policy[safeguardName] || {};\n    }\n    return {\n      safeguardName,\n      safeguardConfig,\n      policyPath: localPoliciesPath,\n      enforcementLevel: 'error',\n      title: `Local policy: ${safeguardName}`,\n    };\n  });\n\n  const policyConfigs = [\n    ...localPolicies,\n    ...ctx.safeguards, // fetched during initialize lifeCycle hook in deployment profile\n  ];\n\n  if (policyConfigs.length === 0) {\n    return;\n  }\n\n  ctx.sls.cli.log('Safeguards Processing...');\n\n  const policies = policyConfigs.map((policy) => ({\n    ...policy,\n    function: loadPolicy(policy.policyPath, policy.safeguardName),\n  }));\n\n  const service = {\n    compiled: {},\n    declaration: cloneDeep(omit(ctx.sls.service, ['serverless'])),\n    provider: ctx.provider,\n    frameworkVersion: ctx.sls.version,\n  };\n\n  const artifactsPath = path.join(basePath, '.serverless');\n  const artifacts = await readdir(artifactsPath);\n  const jsonYamlArtifacts = await Promise.all(\n    artifacts\n      .filter((filename) => filename.match(/\\.(json|yml|yaml)$/i))\n      .map(async (filename) => {\n        const content = await readFile(path.join(artifactsPath, filename));\n        try {\n          if (filename.match(/\\.json$/i)) {\n            return [filename, JSON.parse(content)];\n          }\n          return [filename, yml.parse(content)];\n        } catch (error) {\n          ctx.sls.cli.log(\n            `(Safeguards) Failed to parse file ${filename} in the artifacts directory.`\n          );\n          throw error;\n        }\n      })\n  );\n\n  ctx.sls.cli.log(\n    `Safeguards Results:\n\n   Summary --------------------------------------------------\n`\n  );\n\n  service.compiled = fromPairs(jsonYamlArtifacts);\n  const runningPolicies = policies.map(async (policy) => {\n    process.stdout.write(`  running - ${policy.title}`);\n\n    const result = {\n      approved: false,\n      failed: false,\n      policy,\n    };\n    const approve = () => {\n      result.approved = true;\n      process.stdout.write(`\\r   ${chalk.green('passed')} - ${policy.title}\\n`);\n    };\n    const fail = (message) => {\n      if (result.failed) {\n        result.message += ` ${message}`;\n      } else {\n        const errorWord = policy.enforcementLevel === 'error' ? 'failed' : 'warned';\n        const color = policy.enforcementLevel === 'error' ? chalk.red : chalk.keyword('orange');\n        process.stdout.write(`\\r   ${color(errorWord)} - ${policy.title}\\n`);\n        result.failed = true;\n        result.message = message;\n      }\n    };\n    const policyHandle = { approve, fail };\n\n    await policy.function(policyHandle, service, policy.safeguardConfig);\n    if (!result.approved && !result.failed) {\n      ctx.sls.cli.log(\n        `Safeguard Policy \"${policy.title}\" finished running, but did not explicitly approve the deployment. This is likely a problem in the policy itself. If this problem persists, contact the policy author.`\n      );\n    }\n    return result;\n  });\n\n  ctx.state.safeguardsResults = await Promise.all(runningPolicies);\n  const markedPolicies = ctx.state.safeguardsResults.filter((res) => !res.approved && res.failed);\n\n  const failed = markedPolicies.filter((res) => res.policy.enforcementLevel === 'error').length;\n  const warned = markedPolicies.filter((res) => res.policy.enforcementLevel !== 'error').length;\n  const passed = ctx.state.safeguardsResults.filter((res) => res.approved && !res.failed).length;\n  const summary = `Safeguards Summary: ${chalk.green(`${passed} passed`)}, ${chalk.keyword(\n    'orange'\n  )(`${warned} warnings`)}, ${chalk.red(`${failed} errors`)}`;\n\n  if (markedPolicies.length !== 0) {\n    const resolveMessage = (res) => {\n      if (!res.failed) return 'Finished inconclusively. Deployment halted.';\n      if (res.policy.enforcementLevel === 'error') return chalk.red(`Failed - ${res.message}`);\n      return chalk.keyword('orange')(`Warned - ${res.message}`);\n    };\n    const details = `\\n   ${chalk.yellow(\n      'Details --------------------------------------------------'\n    )}\\n\\n${markedPolicies\n      .map(\n        (res, i) =>\n          `   ${i + 1}) ${resolveMessage(res)}\n      ${chalk.grey(`details: ${res.policy.function.docs}`)}\n      ${res.policy.description}`\n      )\n      .join('\\n\\n\\n')}`;\n\n    process.stdout.write(`${details}\\n\\n`);\n    if (!markedPolicies.every((res) => res.approved || res.policy.enforcementLevel === 'warning')) {\n      ctx.sls.cli.log(summary, '\\nServerless');\n      throw new Error('Deployment blocked by Serverless Safeguards');\n    }\n  }\n  ctx.sls.cli.log(summary, '\\nServerless');\n}\n\nmodule.exports = runPolicies;\nmodule.exports.loadPolicy = loadPolicy;\n"],"file":"index.js"}