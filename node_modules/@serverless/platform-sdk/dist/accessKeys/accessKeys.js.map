{"version":3,"sources":["../../src/accessKeys/accessKeys.js"],"names":["utils","createAccessKeyForTenant","tenant","title","user","getLoggedInUser","platformConfig","backendUrl","method","body","JSON","stringify","tenantName","userName","username","Math","round","Date","headers","Authorization","idToken","response","json","data","secretAccessKey","getAccessKeyForTenant","process","env","SERVERLESS_ACCESS_KEY","Error","accessKeys","writeConfigFile","users","userId","dashboard"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;IAAYA,K;;AACZ;;;;;;;;;;AAEA;;;;AAIA,IAAMC;AAAA,qEAA2B,iBAAOC,MAAP,EAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACzB,6BADyB;;AAAA;AAGzBC,gBAHyB,GAGlBJ,MAAMK,eAAN,EAHkB;AAAA;AAAA,mBAKR,qBAAO,GAAEC,iBAAeC,UAAW,WAAUL,MAAO,aAApD,EAAkE;AACvFM,sBAAQ,MAD+E;AAEvFC,oBAAMC,KAAKC,SAAL,CAAe;AACnBC,4BAAYV,MADO;AAEnBW,0BAAUT,KAAKU,QAFI;AAGnBX,uBAAOA,SAAS,gBAAgBY,KAAKC,KAAL,CAAW,CAAC,IAAIC,IAAJ,EAAD,GAAc,IAAzB;AAHb,eAAf,CAFiF;AAOvFC,uBAAS;AACPC,+BAAgB,UAASf,KAAKgB,OAAQ;AAD/B;AAP8E,aAAlE,CALQ;;AAAA;AAKzBC,oBALyB;AAAA;AAAA,mBAiBZA,SAASC,IAAT,EAjBY;;AAAA;AAiBzBC,gBAjByB;AAAA,6CAkBxBA,KAAKC,eAlBmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAqBA;;;;;;AAMA,IAAMC;AAAA,sEAAwB,kBAAOvB,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAExBwB,QAAQC,GAAR,CAAYC,qBAFY;AAAA;AAAA;AAAA;;AAAA,8CAGnBF,QAAQC,GAAR,CAAYC,qBAHO;;AAAA;AAAA,gBAMvB1B,MANuB;AAAA;AAAA;AAAA;;AAAA,kBAOpB,IAAI2B,KAAJ,CAAU,mDAAV,CAPoB;;AAAA;AAAA;AAAA,mBAUtB,6BAVsB;;AAAA;AAYtBzB,gBAZsB,GAYfJ,MAAMK,eAAN,EAZe;;AAc5B;;AAd4B,kBAexB,CAACD,KAAK0B,UAAN,IAAoB,CAAC1B,KAAK0B,UAAL,CAAgB5B,MAAhB,CAfG;AAAA;AAAA;AAAA;;AAAA,iBAgBtBE,KAAKgB,OAhBiB;AAAA;AAAA;AAAA;;AAiBxB,gBAAI,CAAChB,KAAK0B,UAAV,EAAsB;AACpB1B,mBAAK0B,UAAL,GAAkB,EAAlB;AACD;AAnBuB;AAAA,mBAoBQ7B,yBAAyBC,MAAzB,CApBR;;AAAA;AAoBxBE,iBAAK0B,UAAL,CAAgB5B,MAAhB,CApBwB;;AAqBxBF,kBAAM+B,eAAN,CAAsB;AACpBC,qBAAO;AACL,iBAAC5B,KAAK6B,MAAN,GAAe;AACbC,6BAAW,EAAEJ,YAAY,EAAE,CAAC5B,MAAD,GAAUE,KAAK0B,UAAL,CAAgB5B,MAAhB,CAAZ,EAAd;AADE;AADV;AADa,aAAtB;AArBwB;AAAA;;AAAA;AAAA,kBA6BlB,IAAI2B,KAAJ,CACH,2CAA0C3B,MAAO,0EAD9C,CA7BkB;;AAAA;AAAA,8CAmCrBE,KAAK0B,UAAL,CAAgB5B,MAAhB,CAnCqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA,GAAN;;QAsCSD,wB,GAAAA,wB;QAA0BwB,qB,GAAAA,qB","file":"accessKeys.js","sourcesContent":["import fetch from '../fetch'\nimport platformConfig from '../config'\nimport * as utils from '../utils'\nimport refreshToken from '../login/refreshToken'\n\n/*\n * Create Access Key For Tenant\n */\n\nconst createAccessKeyForTenant = async (tenant, title) => {\n  await refreshToken()\n\n  const user = utils.getLoggedInUser()\n\n  const response = await fetch(`${platformConfig.backendUrl}tenants/${tenant}/accessKeys`, {\n    method: 'POST',\n    body: JSON.stringify({\n      tenantName: tenant,\n      userName: user.username,\n      title: title || 'serverless_' + Math.round(+new Date() / 1000)\n    }),\n    headers: {\n      Authorization: `bearer ${user.idToken}`\n    }\n  })\n\n  const data = await response.json()\n  return data.secretAccessKey\n}\n\n/*\n * Get Access Key For Tenant\n * - Fetches the access key for the specified `tenant`\n * - If an access key is present as an env var, that overrides all else\n */\n\nconst getAccessKeyForTenant = async (tenant) => {\n  // Check if in ENV, return that first...\n  if (process.env.SERVERLESS_ACCESS_KEY) {\n    return process.env.SERVERLESS_ACCESS_KEY\n  }\n\n  if (!tenant) {\n    throw new Error('SDK: getAccessKeyForTenant() requires a \"tenant\".')\n  }\n\n  await refreshToken()\n\n  const user = utils.getLoggedInUser()\n\n  // Check if in config file, if not, & if possible, create one\n  if (!user.accessKeys || !user.accessKeys[tenant]) {\n    if (user.idToken) {\n      if (!user.accessKeys) {\n        user.accessKeys = {}\n      }\n      user.accessKeys[tenant] = await createAccessKeyForTenant(tenant)\n      utils.writeConfigFile({\n        users: {\n          [user.userId]: {\n            dashboard: { accessKeys: { [tenant]: user.accessKeys[tenant] } }\n          }\n        }\n      })\n    } else {\n      throw new Error(\n        `Could not find an access key for tenant ${tenant}.  Log out and log in again to create a new acce ss key for this tenant.`\n      )\n    }\n  }\n\n  return user.accessKeys[tenant]\n}\n\nexport { createAccessKeyForTenant, getAccessKeyForTenant }\n"]}