{"version":3,"sources":["../../src/utils/configFile.js"],"names":["fileName","process","env","SERVERLESS_PLATFORM_STAGE","toLowerCase","trim","getConfigFilePath","localPath","path","join","cwd","globalPath","os","homedir","localConfigExists","fs","existsSync","globalConfigExists","config","userId","frameworkId","trackingDisabled","meta","created_at","Math","round","Date","updated_at","writeFileAtomic","sync","JSON","stringify","readConfigFile","configFilePath","configFile","readFileSync","parse","writeConfigFile","data","updatedConfigFile","getLoggedInUser","user","username","accessKeys","idToken"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA;AACA,IAAIA,WAAW,YAAf;AACA,IAAIC,QAAQC,GAAR,CAAYC,yBAAZ,IAAyCF,QAAQC,GAAR,CAAYC,yBAAZ,KAA0C,MAAvF,EAA+F;AAC7FH,aAAW,eAAeC,QAAQC,GAAR,CAAYC,yBAAZ,CAAsCC,WAAtC,EAA1B;AACAJ,aAAWA,SAASK,IAAT,EAAX;AACD;;AAED;;;;;;AAMO,IAAMC,gDAAoB,SAApBA,iBAAoB,GAAM;AACrC,MAAMC,YAAYC,eAAKC,IAAL,CAAUR,QAAQS,GAAR,EAAV,EAA0B,IAAGV,QAAS,IAAtC,CAAlB;AACA,MAAMW,aAAaH,eAAKC,IAAL,CAAUG,aAAGC,OAAH,EAAV,EAAyB,IAAGb,QAAS,IAArC,CAAnB;AACA,MAAMc,oBAAoBC,aAAGC,UAAH,CAAcT,SAAd,CAA1B;AACA,MAAMU,qBAAqBF,aAAGC,UAAH,CAAcL,UAAd,CAA3B;;AAEA,MAAIG,iBAAJ,EAAuB;AACrB,WAAOP,SAAP;AACD,GAFD,MAEO,IAAIU,kBAAJ,EAAwB;AAC7B,WAAON,UAAP;AACD;;AAED;AACA;AACA,MAAMO,SAAS;AACbC,YAAQ,IADK;AAEbC,iBAAa,kBAFA;AAGbC,sBAAkB,KAHL,EAGY;AACzBC,UAAM;AACJC,kBAAYC,KAAKC,KAAL,CAAW,CAAC,IAAIC,IAAJ,EAAD,GAAc,IAAzB,CADR,EACwC;AAC5CC,kBAAY,IAFR,CAEa;AAFb;AAJO,GAAf;;AAUAC,4BAAgBC,IAAhB,CAAqBlB,UAArB,EAAiCmB,KAAKC,SAAL,CAAeb,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAjC;AACA,SAAOP,UAAP;AACD,CA1BM;;AA4BP;;;;;;AAMO,IAAMqB,0CAAiB,SAAjBA,cAAiB,GAAM;AAClC,MAAMC,iBAAiB3B,mBAAvB;AACA,MAAM4B,aAAaD,iBAAiBlB,aAAGoB,YAAH,CAAgBF,cAAhB,CAAjB,GAAmD,IAAtE;AACA,SAAOC,aAAaJ,KAAKM,KAAL,CAAWF,UAAX,CAAb,GAAsC,EAA7C;AACD,CAJM;;AAMP;;;;;AAKO,IAAMG,4CAAkB,SAAlBA,eAAkB,CAACC,IAAD,EAAU;AACvC,MAAML,iBAAiB3B,mBAAvB;AACA,MAAM4B,aAAaF,gBAAnB;AACA,MAAMO,oBAAoB,2BAAeL,UAAf,EAA2BI,IAA3B,CAA1B;AACAC,oBAAkBjB,IAAlB,CAAuBK,UAAvB,GAAoCH,KAAKC,KAAL,CAAW,CAAC,IAAIC,IAAJ,EAAD,GAAc,IAAzB,CAApC;AACAE,4BAAgBC,IAAhB,CAAqBI,cAArB,EAAqCH,KAAKC,SAAL,CAAeQ,iBAAf,EAAkC,IAAlC,EAAwC,CAAxC,CAArC;AACA,SAAOA,iBAAP;AACD,CAPM;;AASP;;;;;AAKO,IAAMC,4CAAkB,SAAlBA,eAAkB,GAAM;AACnC,MAAMtB,SAASc,gBAAf;AACA,MAAI,CAACd,OAAOC,MAAZ,EAAoB;AAClB,WAAO,IAAP;AACD;AACD,MAAMsB,OAAO,iBAAI,CAAC,OAAD,EAAUvB,OAAOC,MAAjB,EAAyB,WAAzB,CAAJ,EAA2CD,MAA3C,CAAb;AACA,MAAI,CAACuB,IAAD,IAAS,CAACA,KAAKC,QAAnB,EAA6B;AAC3B,WAAO,IAAP,CAD2B,CACf;AACb;AACD,SAAO;AACLvB,YAAQD,OAAOC,MADV;AAELuB,cAAUD,KAAKC,QAFV;AAGLC,gBAAYF,KAAKE,UAHZ;AAILC,aAASH,KAAKG;AAJT,GAAP;AAMD,CAfM","file":"configFile.js","sourcesContent":["import fs from 'fs'\nimport os from 'os'\nimport path from 'path'\nimport uuidv1 from 'uuid/v1'\nimport { path as get, mergeDeepRight } from 'ramda'\nimport writeFileAtomic from 'write-file-atomic'\n\n// Locate the correct .serverlessrc per current environment\nlet fileName = 'serverless'\nif (process.env.SERVERLESS_PLATFORM_STAGE && process.env.SERVERLESS_PLATFORM_STAGE !== 'prod') {\n  fileName = 'serverless' + process.env.SERVERLESS_PLATFORM_STAGE.toLowerCase()\n  fileName = fileName.trim()\n}\n\n/*\n * Get Config File Path\n * - .serverlessrc can either be in the current working dir or system root dir.\n * - This function returns the local path first, if it exists.\n */\n\nexport const getConfigFilePath = () => {\n  const localPath = path.join(process.cwd(), `.${fileName}rc`)\n  const globalPath = path.join(os.homedir(), `.${fileName}rc`)\n  const localConfigExists = fs.existsSync(localPath)\n  const globalConfigExists = fs.existsSync(globalPath)\n\n  if (localConfigExists) {\n    return localPath\n  } else if (globalConfigExists) {\n    return globalPath\n  }\n\n  // If neither exist, create the config file in the home dir\n  // Normally the Framework does this, but just in case...\n  const config = {\n    userId: null,\n    frameworkId: uuidv1(),\n    trackingDisabled: false, // default false\n    meta: {\n      created_at: Math.round(+new Date() / 1000), // config file creation date\n      updated_at: null // config file updated date\n    }\n  }\n\n  writeFileAtomic.sync(globalPath, JSON.stringify(config, null, 2))\n  return globalPath\n}\n\n/*\n * Read Config File\n * - The Framework always creates a config file on post-install via the logstat method.  (This isn't optimal and should be changed in the Framework.)\n * - The \"rc\" package automatically looks in many places (local folder, up a few levels, root dir)\n */\n\nexport const readConfigFile = () => {\n  const configFilePath = getConfigFilePath()\n  const configFile = configFilePath ? fs.readFileSync(configFilePath) : null\n  return configFile ? JSON.parse(configFile) : {}\n}\n\n/*\n * Write Config File\n * - Writes a .serverlessrc file on the local machine in the root dir\n */\n\nexport const writeConfigFile = (data) => {\n  const configFilePath = getConfigFilePath()\n  const configFile = readConfigFile()\n  const updatedConfigFile = mergeDeepRight(configFile, data)\n  updatedConfigFile.meta.updated_at = Math.round(+new Date() / 1000)\n  writeFileAtomic.sync(configFilePath, JSON.stringify(updatedConfigFile, null, 2))\n  return updatedConfigFile\n}\n\n/*\n * Get Logged In User\n * - Fetches the current logged in user from the .serverlessrc file\n */\n\nexport const getLoggedInUser = () => {\n  const config = readConfigFile()\n  if (!config.userId) {\n    return null\n  }\n  const user = get(['users', config.userId, 'dashboard'], config)\n  if (!user || !user.username) {\n    return null // user is logged out\n  }\n  return {\n    userId: config.userId,\n    username: user.username,\n    accessKeys: user.accessKeys,\n    idToken: user.idToken\n  }\n}\n"]}