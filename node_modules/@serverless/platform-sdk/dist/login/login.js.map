{"version":3,"sources":["../../src/login/login.js"],"names":["utils","login","tenant","configFile","readConfigFile","Error","loginIdentityPromises","transactionId","scope","AUTH0_DOMAIN","platformConfig","auth0Domain","auth0Queries","querystring","stringify","audience","response_type","client_id","auth0ClientId","redirect_uri","frontendUrl","join","auth0Endpoint","loginData","data","decoded","id_token","id","tracking_id","sub","expiresAt","expires_in","Date","now","expires_at","userId","users","name","email","username","dashboard","refreshToken","refresh_token","accessToken","access_token","idToken","accessKeys","enterprise","versionSDK","currentSdkVersion","timeLastLogin","Math","round","updatedConfigFile","writeConfigFile","accessKey","module","exports"],"mappings":"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","file":"login.js","sourcesContent":["/*\n * Login\n * - Logs user in via CLI.\n * - Loads and updates data in user's .serverlessrc.\n */\n\nimport querystring from 'querystring'\nimport jwtDecode from 'jwt-decode'\nimport { version as currentSdkVersion } from '../../package.json'\nimport * as utils from '../utils'\nimport openBrowser from './openBrowser'\nimport { createAccessKeyForTenant } from '../accessKeys'\nimport platformConfig from '../config'\nimport loginIdentity from './loginIdentity'\n\nconst login = async (tenant) => {\n  // Load local configuration file\n  let configFile = utils.readConfigFile()\n  if (!configFile) {\n    throw new Error(\n      `Serverless Enterprise requires a .serverlessrc file in the project's directory or root directory of this machine.`\n    )\n  }\n\n  const loginIdentityPromises = loginIdentity()\n  const transactionId = await loginIdentityPromises.transactionId\n\n  const scope = ['openid', 'email_verified', 'email', 'profile', 'name', 'offline_access']\n\n  const AUTH0_DOMAIN = platformConfig.auth0Domain\n\n  const auth0Queries = querystring.stringify({\n    audience: `https://${AUTH0_DOMAIN}/userinfo`,\n    response_type: 'code',\n    client_id: platformConfig.auth0ClientId,\n    redirect_uri: `${platformConfig.frontendUrl}callback?transactionId=${transactionId}`,\n    scope: scope.join(' ')\n  })\n  const auth0Endpoint = `https://${AUTH0_DOMAIN}/authorize?${auth0Queries}`\n\n  await openBrowser(auth0Endpoint)\n\n  const data = await loginIdentityPromises.loginData\n\n  const decoded = jwtDecode(data.id_token)\n  const id = decoded.tracking_id || decoded.sub\n  const expiresAt = data.expires_in ? Date.now() + data.expires_in : data.expires_at\n  configFile.userId = id\n  configFile.users = configFile.users || {}\n  configFile.users[id] = {\n    userId: id,\n    name: decoded.name,\n    email: decoded.email,\n    username: data.username,\n    dashboard: {\n      refreshToken: data.refresh_token,\n      accessToken: data.access_token,\n      idToken: data.id_token,\n      expiresAt: expiresAt,\n      username: data.username\n    }\n  }\n\n  // Ensure accessKeys object exists\n  if (!configFile.users[id].dashboard.accessKeys) {\n    configFile.users[id].dashboard.accessKeys = {}\n  }\n\n  // Add enterprise object\n  configFile.users[id].enterprise = configFile.users[id].enterprise || {}\n  configFile.users[id].enterprise.versionSDK = currentSdkVersion\n  configFile.users[id].enterprise.timeLastLogin = Math.round(+new Date() / 1000)\n\n  // Write updated data to .serverlessrc\n  let updatedConfigFile = utils.writeConfigFile(configFile)\n\n  // If tenant is included, update config w/ new accesskey for that tenant\n  let accessKey\n  if (tenant && tenant !== 'tenantname') {\n    accessKey = await createAccessKeyForTenant(tenant)\n    if (accessKey) {\n      configFile = utils.readConfigFile()\n      configFile.users[id].dashboard.accessKeys[tenant] = accessKey\n      updatedConfigFile = utils.writeConfigFile(configFile)\n    }\n  }\n\n  // TODO: Log Stat\n\n  return updatedConfigFile\n}\n\nmodule.exports = login\n"]}