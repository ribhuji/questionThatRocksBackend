{"version":3,"sources":["../../src/login/loginIdentity.js"],"names":["WS","require","platformConfig","getAgent","module","exports","loginIdentity","ws","loginBrokerUrl","undefined","followRedirects","agent","resolveTransactionId","rejectTransactionId","transactionId","Promise","resolve","reject","resolveLoginData","rejectLoginData","loginData","on","msg","data","JSON","parse","event","terminate","Error","error","send"],"mappings":";;AAAA;;;;;;;;AAQA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,iBAAiBD,QAAQ,WAAR,CAAvB;;eACqBA,QAAQ,UAAR,C;IAAbE,Q,YAAAA,Q;;AAERC,OAAOC,OAAP,GAAiB,SAASC,aAAT,GAAyB;AACxC,MAAMC,KAAK,IAAIP,EAAJ,CAAQ,GAAEE,eAAeM,cAAe,QAAxC,EAAiDC,SAAjD,EAA4D;AACrEC,qBAAiB,IADoD;AAErEC,WAAOR;AAF8D,GAA5D,CAAX;;AAKA,MAAIS,6BAAJ;AAAA,MAA0BC,4BAA1B;AACA,MAAMC,gBAAgB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrDL,2BAAuBI,OAAvB;AACAH,0BAAsBI,MAAtB;AACD,GAHqB,CAAtB;;AAKA,MAAIC,yBAAJ;AAAA,MAAsBC,wBAAtB;AACA,MAAMC,YAAY,IAAIL,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACjDC,uBAAmBF,OAAnB;AACAG,sBAAkBF,MAAlB;AACD,GAHiB,CAAlB;;AAKAV,KAAGc,EAAH,CAAM,SAAN,EAAiB,UAACC,GAAD,EAAS;AACxB,QAAI;AACF,UAAMC,OAAOC,KAAKC,KAAL,CAAWH,GAAX,CAAb;AACA,cAAQC,KAAKG,KAAb;AACE,aAAK,OAAL;AACEd,+BAAqBW,KAAKT,aAA1B;AACA;AACF,aAAK,WAAL;AACE,iBAAOS,KAAKG,KAAZ;AACAR,2BAAiBK,IAAjB;AACAhB,aAAGoB,SAAH;AACA;AACF;AACE,gBAAM,IAAIC,KAAJ,CACJ,6HADI,CAAN;AAVJ;AAcD,KAhBD,CAgBE,OAAOC,KAAP,EAAc;AACdhB,0BAAoBgB,KAApB;AACAV,sBAAgBU,KAAhB;AACAtB,SAAGoB,SAAH;AACD;AACF,GAtBD;;AAwBApB,KAAGc,EAAH,CAAM,MAAN,EAAc,YAAM;AAClBd,OAAGuB,IAAH,CAAQ,oBAAR;AACD,GAFD;;AAIA,SAAO;AACLhB,iBADK;AAELM;AAFK,GAAP;AAID,CAlDD","file":"loginIdentity.js","sourcesContent":["/*\n * Login (Identity)\n * - Initiates a login transaction with the login broker\n * - Returns an object with two promise properties\n * - `transactionId` is a promise which resolves with an ID to be used by the frontend when sending the login information\n * - `loginData` is a promise which resolves with an object containing at least `idToken`, and other propoerties supplied by the frontend (e.g. `refreshToken`)\n */\n\nconst WS = require('ws')\nconst platformConfig = require('../config')\nconst { getAgent } = require('../fetch')\n\nmodule.exports = function loginIdentity() {\n  const ws = new WS(`${platformConfig.loginBrokerUrl}broker`, undefined, {\n    followRedirects: true,\n    agent: getAgent()\n  })\n\n  let resolveTransactionId, rejectTransactionId\n  const transactionId = new Promise((resolve, reject) => {\n    resolveTransactionId = resolve\n    rejectTransactionId = reject\n  })\n\n  let resolveLoginData, rejectLoginData\n  const loginData = new Promise((resolve, reject) => {\n    resolveLoginData = resolve\n    rejectLoginData = reject\n  })\n\n  ws.on('message', (msg) => {\n    try {\n      const data = JSON.parse(msg)\n      switch (data.event) {\n        case 'ready':\n          resolveTransactionId(data.transactionId)\n          break\n        case 'fulfilled':\n          delete data.event\n          resolveLoginData(data)\n          ws.terminate()\n          break\n        default:\n          throw new Error(\n            'Encountered an unexpected message while waiting for login information. Your Serverless Framework or SDK may be out of date.'\n          )\n      }\n    } catch (error) {\n      rejectTransactionId(error)\n      rejectLoginData(error)\n      ws.terminate()\n    }\n  })\n\n  ws.on('open', () => {\n    ws.send('{\"action\":\"login\"}')\n  })\n\n  return {\n    transactionId,\n    loginData\n  }\n}\n"]}