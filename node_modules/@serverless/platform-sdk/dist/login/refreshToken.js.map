{"version":3,"sources":["../../src/login/refreshToken.js"],"names":["utils","refreshToken","configFile","readConfigFile","currentId","userId","users","dashboard","decoded","idToken","Number","exp","Date","now","body","JSON","stringify","platformConfig","backendUrl","method","response","json","tokens","expiresAt","expires_in","id_token","accessToken","access_token","writeConfigFile","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;IAAYA,K;;AACZ;;;;;;;;;;AAEA,IAAMC;AAAA,qEAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,sBADa,GACAF,MAAMG,cAAN,EADA;AAEbC,qBAFa,GAEDF,WAAWG,MAFV;;AAAA,gBAGdH,WAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCN,YAHxB;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOnB;AACMO,mBARa,GAQH,yBAAUN,WAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCE,OAAhD,CARG;;AAAA,kBASfC,OAAOF,QAAQG,GAAf,IAAsB,IAAtB,GAA6BC,KAAKC,GAAL,EATd;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAabC,gBAba,GAaNC,KAAKC,SAAL,CAAe,EAAEf,cAAcC,WAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCN,YAAtD,EAAf,CAbM;AAAA;AAAA,mBAcI,qBAAO,GAAEgB,iBAAeC,UAAW,gBAAnC,EAAoD;AACzEC,sBAAQ,MADiE;AAEzEL;AAFyE,aAApD,CAdJ;;AAAA;AAcbM,oBAda;AAAA;AAAA,mBAmBEA,SAASC,IAAT,EAnBF;;AAAA;AAmBbC,kBAnBa;AAoBbC,qBApBa,GAoBDD,OAAOE,UAAP,GAAoB,IAApB,GAA2BZ,KAAKC,GAAL,EApB1B;;AAqBnBX,uBAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCE,OAAtC,GAAgDa,OAAOG,QAAvD;AACAvB,uBAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCmB,WAAtC,GAAoDJ,OAAOK,YAA3D;AACAzB,uBAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCgB,SAAtC,GAAkDA,SAAlD;AACAvB,kBAAM4B,eAAN,CAAsB1B,UAAtB;;AAxBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA2BA2B,OAAOC,OAAP,GAAiB7B,YAAjB","file":"refreshToken.js","sourcesContent":["import fetch from '../fetch'\nimport platformConfig from '../config'\nimport * as utils from '../utils'\nimport jwtDecode from 'jwt-decode'\n\nconst refreshToken = async () => {\n  const configFile = utils.readConfigFile()\n  const currentId = configFile.userId\n  if (!configFile.users[currentId].dashboard.refreshToken) {\n    return\n  }\n\n  // id token not expired, no need to renew\n  const decoded = jwtDecode(configFile.users[currentId].dashboard.idToken)\n  if (Number(decoded.exp) * 1000 > Date.now()) {\n    return\n  }\n\n  const body = JSON.stringify({ refreshToken: configFile.users[currentId].dashboard.refreshToken })\n  const response = await fetch(`${platformConfig.backendUrl}tokens/refresh`, {\n    method: 'POST',\n    body\n  })\n\n  const tokens = await response.json()\n  const expiresAt = tokens.expires_in * 1000 + Date.now()\n  configFile.users[currentId].dashboard.idToken = tokens.id_token\n  configFile.users[currentId].dashboard.accessToken = tokens.access_token\n  configFile.users[currentId].dashboard.expiresAt = expiresAt\n  utils.writeConfigFile(configFile)\n}\n\nmodule.exports = refreshToken\n"]}