{"version":3,"sources":["../../src/deployments/index.js"],"names":["data","versionFramework","versionEnterprisePlugin","versionSDK","packageJsonVersion","serverlessFile","serverlessFileName","tenantUid","appUid","tenantName","appName","serviceName","stageName","regionName","logsRoleArn","status","error","archived","provider","type","functions","subscriptions","resources","layers","plugins","safeguards","secrets","outputs","custom","ramda","mergeDeepRight","name","Error","fn","description","timeout","handler","memorySize","runtime","role","onError","awsKmsKeyArn","tags","vpc","securityGroupIds","subnetIds","function","sub","path","method","restApiId","cors","push","dashboardApi","platformConfig","backendUrl","dashboardUrl","frontendUrl","accessKey","body","JSON","stringify","headers","Authorization","response","json","deployment"],"mappings":";;;;;;qjBAAA;;;;AAIA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;;;;AAGE,oBAAc;AAAA;;AACZ,SAAKA,IAAL,GAAY;AACV;;;;AAIAC,wBAAkB,IALR;AAMVC,+BAAyB,IANf;AAOVC,kBAAYC,gBAPF;;AASV;;;;;AAKAC,sBAAgB,IAdN;AAeVC,0BAAoB,IAfV;AAgBVC,iBAAW,IAhBD;AAiBVC,cAAQ,IAjBE;AAkBVC,kBAAY,IAlBF;AAmBVC,eAAS,IAnBC;AAoBVC,mBAAa,IApBH;AAqBVC,iBAAW,IArBD;AAsBVC,kBAAY,IAtBF;;AAwBV;AACAC,mBAAa,IAzBH;;AA2BVC,cAAQ,IA3BE,EA2BI;AACdC,aAAO,IA5BG;;AA8BV;AACAC,gBAAU,KA/BA;;AAiCV;;;;;;AAMAC,gBAAU,EAAEC,MAAM,KAAR,EAvCA;;AAyCVC,iBAAW,EAzCD;AA0CVC,qBAAe,EA1CL;AA2CVC,iBAAW,EA3CD;AA4CVC,cAAQ,EA5CE;AA6CVC,eAAS,EA7CC;AA8CVC,kBAAY,EA9CF;AA+CVC,eAAS,EA/CC;AAgDVC,eAAS,EAhDC;AAiDVC,cAAQ;AAjDE,KAAZ;AAmDD;;AAED;;;;;;0BAIM;AACJ,aAAO,KAAK5B,IAAZ;AACD;;AAED;;;;;;wBAIIA,I,EAAM;AACR;AACA,WAAKA,IAAL,GAAY6B,gBAAMC,cAAN,CAAqB,KAAK9B,IAA1B,EAAgCA,IAAhC,CAAZ;AACA,aAAO,KAAKA,IAAZ;AACD;;AAED;;;;;;gCAIYA,I,EAAM;AAChB,UAAI,CAACA,KAAK+B,IAAV,EAAgB;AACd,cAAM,IAAIC,KAAJ,CAAW,6BAAX,CAAN;AACD;;AAED,UAAMC,KAAK;AACT;AACAF,cAAM,IAFG;AAGTG,qBAAa,IAHJ;AAITf,cAAM,WAJG;AAKTgB,iBAAS,IALA;AAMT;AACAP,gBAAQ;AACNQ,mBAAS,IADH;AAENC,sBAAY,IAFN;AAGNC,mBAAS,IAHH;AAINC,gBAAM,IAJA;AAKNC,mBAAS,IALH;AAMNC,wBAAc,IANR;;AAQNC,gBAAM,EARA;;AAUNC,eAAK;AACHC,8BAAkB,EADf;AAEHC,uBAAW;AAFR,WAVC;;AAeNtB,kBAAQ;AAfF;AAPC,OAAX;;AA0BA,WAAKvB,IAAL,CAAUoB,SAAV,CAAoBpB,KAAK+B,IAAzB,IAAiCF,gBAAMC,cAAN,CAAqBG,EAArB,EAAyBjC,IAAzB,CAAjC;AACA,aAAO,KAAKA,IAAL,CAAUoB,SAAV,CAAoBpB,KAAK+B,IAAzB,CAAP;AACD;;AAED;;;;;;oCAIgB/B,I,EAAM;AACpB,UAAI,CAACA,KAAKmB,IAAV,EAAgB;AACd,cAAM,IAAIa,KAAJ,CAAW,iCAAX,CAAN;AACD;AACD,UAAI,CAAChC,KAAK8C,QAAV,EAAoB;AAClB,cAAM,IAAId,KAAJ,CAAW,qCAAX,CAAN;AACD;AACD,UAAI,CAAC,KAAKhC,IAAL,CAAUoB,SAAV,CAAoBpB,KAAK8C,QAAzB,CAAL,EAAyC;AACvC,cAAM,IAAId,KAAJ,CACH,8EADG,CAAN;AAGD;;AAED,UAAIe,MAAM;AACR;AACA5B,cAAM,IAFE;AAGR2B,kBAAU,IAHF;AAIR;AACAlB,gBAAQ;;AAGV;AARU,OAAV,CASA,QAAQ5B,KAAKmB,IAAb;AACE,aAAK,qBAAL;AACE4B,cAAInB,MAAJ,CAAWoB,IAAX,GAAkB,IAAlB;AACAD,cAAInB,MAAJ,CAAWqB,MAAX,GAAoB,IAApB;AACAF,cAAInB,MAAJ,CAAWsB,SAAX,GAAuB,IAAvB;AACAH,cAAInB,MAAJ,CAAWuB,IAAX,GAAkB,KAAlB;AACA;AACF;AACE;AARJ;;AAWAJ,YAAMlB,gBAAMC,cAAN,CAAqBiB,GAArB,EAA0B/C,IAA1B,CAAN;AACA,WAAKA,IAAL,CAAUqB,aAAV,CAAwB+B,IAAxB,CAA6BL,GAA7B;;AAEA,aAAOA,GAAP;AACD;;AAED;;;;;;;;;;;;;AAKE;AACIM,4B,GAAeC,iBAAeC,U;;AAClCF,gCAAiB,WAAU,KAAKrD,IAAL,CAAUS,UAAW,GAAhD;AACA4C,gCAAiB,gBAAe,KAAKrD,IAAL,CAAUU,OAAQ,GAAlD;AACA2C,gCAAiB,YAAW,KAAKrD,IAAL,CAAUW,WAAY,GAAlD;AACA0C,gCAAiB,UAAS,KAAKrD,IAAL,CAAUY,SAAU,GAA9C;AACAyC,gCAAiB,WAAU,KAAKrD,IAAL,CAAUa,UAAW,GAAhD;AACAwC,gCAAiB,aAAjB;;AAEIG,4B,GAAeF,iBAAeG,W;;AAClCD,gCAAiB,WAAU,KAAKxD,IAAL,CAAUS,UAAW,GAAhD;AACA+C,gCAAiB,gBAAe,KAAKxD,IAAL,CAAUU,OAAQ,GAAlD;AACA8C,gCAAiB,YAAW,KAAKxD,IAAL,CAAUW,WAAY,GAAlD;AACA6C,gCAAiB,SAAQ,KAAKxD,IAAL,CAAUY,SAAU,GAA7C;AACA4C,gCAAiB,UAAS,KAAKxD,IAAL,CAAUa,UAAW,EAA/C;;AAEA;;uBACwB,uCAAsB,KAAKb,IAAL,CAAUS,UAAhC,C;;;AAAlBiD,yB;;uBAGiB,qBAAML,YAAN,EAAoB,EAAE;AAC3CJ,0BAAQ,MADiC;AAEzCU,wBAAMC,KAAKC,SAAL,CAAe,KAAK7D,IAApB,CAFmC;AAGzC8D,2BAAS;AACPC,mCAAgB,UAASL,SAAU;AAD5B;AAHgC,iBAApB,C;;;AAAjBM,wB;;uBAScA,SAASC,IAAT,E;;;;8BAClBT,Y;;AADAU,4B;AACAV,8B","file":"index.js","sourcesContent":["/*\n * Deployment\n */\n\nimport ramda from 'ramda'\nimport { version as packageJsonVersion } from '../../package.json'\nimport platformConfig from '../config'\nimport { getAccessKeyForTenant } from '../accessKeys'\nimport fetch from '../fetch'\n\nexport default class {\n  constructor() {\n    this.data = {\n      /*\n       * Versions\n       */\n\n      versionFramework: null,\n      versionEnterprisePlugin: null,\n      versionSDK: packageJsonVersion,\n\n      /*\n       * Service Data\n       * - Standard service data\n       */\n\n      serverlessFile: null,\n      serverlessFileName: null,\n      tenantUid: null,\n      appUid: null,\n      tenantName: null,\n      appName: null,\n      serviceName: null,\n      stageName: null,\n      regionName: null,\n\n      // the arn generated for fetching constructed logs\n      logsRoleArn: null,\n\n      status: null, // success OR errror\n      error: null,\n\n      // IF ARCHIVED... everything below this will be null\n      archived: false,\n\n      /*\n       * App Data\n       * - Provider, functions, subscriptions, resources, etc...\n       * - Function-defaults in `provider` will be replicated across each function\n       */\n\n      provider: { type: 'aws' },\n\n      functions: {},\n      subscriptions: [],\n      resources: {},\n      layers: {},\n      plugins: [],\n      safeguards: [],\n      secrets: [],\n      outputs: {},\n      custom: {}\n    }\n  }\n\n  /*\n   * Get\n   */\n\n  get() {\n    return this.data\n  }\n\n  /*\n   * Set\n   */\n\n  set(data) {\n    // TODO: Validate\n    this.data = ramda.mergeDeepRight(this.data, data)\n    return this.data\n  }\n\n  /*\n   * Set Function\n   */\n\n  setFunction(data) {\n    if (!data.name) {\n      throw new Error(`function 'name' is required`)\n    }\n\n    const fn = {\n      // Non-provider-specific data goes here\n      name: null,\n      description: null,\n      type: 'awsLambda',\n      timeout: null,\n      // Provider-specific data goes here\n      custom: {\n        handler: null,\n        memorySize: null,\n        runtime: null,\n        role: null,\n        onError: null,\n        awsKmsKeyArn: null,\n\n        tags: {},\n\n        vpc: {\n          securityGroupIds: [],\n          subnetIds: []\n        },\n\n        layers: []\n      }\n    }\n\n    this.data.functions[data.name] = ramda.mergeDeepRight(fn, data)\n    return this.data.functions[data.name]\n  }\n\n  /*\n   * Set Subscription\n   */\n\n  setSubscription(data) {\n    if (!data.type) {\n      throw new Error(`subscription 'type' is required`)\n    }\n    if (!data.function) {\n      throw new Error(`subscription 'function' is required`)\n    }\n    if (!this.data.functions[data.function]) {\n      throw new Error(\n        `subscription 'function' must be added to the deployment before subscriptions`\n      )\n    }\n\n    let sub = {\n      // Non-provider-specific data goes here\n      type: null,\n      function: null,\n      // Provider-specific data goes here\n      custom: {}\n    }\n\n    // Add custom subscription properties per event type\n    switch (data.type) {\n      case 'aws.apigateway.http':\n        sub.custom.path = null\n        sub.custom.method = null\n        sub.custom.restApiId = null\n        sub.custom.cors = false\n        break\n      default:\n        break\n    }\n\n    sub = ramda.mergeDeepRight(sub, data)\n    this.data.subscriptions.push(sub)\n\n    return sub\n  }\n\n  /*\n   * Save\n   */\n\n  async save() {\n    // Create backend & frontend urls\n    let dashboardApi = platformConfig.backendUrl\n    dashboardApi += `tenants/${this.data.tenantName}/`\n    dashboardApi += `applications/${this.data.appName}/`\n    dashboardApi += `services/${this.data.serviceName}/`\n    dashboardApi += `stages/${this.data.stageName}/`\n    dashboardApi += `regions/${this.data.regionName}/`\n    dashboardApi += `deployments`\n\n    let dashboardUrl = platformConfig.frontendUrl\n    dashboardUrl += `tenants/${this.data.tenantName}/`\n    dashboardUrl += `applications/${this.data.appName}/`\n    dashboardUrl += `services/${this.data.serviceName}/`\n    dashboardUrl += `stage/${this.data.stageName}/`\n    dashboardUrl += `region/${this.data.regionName}`\n\n    // Fetch access key\n    const accessKey = await getAccessKeyForTenant(this.data.tenantName)\n\n    // Call api to save deployment\n    const response = await fetch(dashboardApi, { // eslint-disable-line\n      method: 'POST',\n      body: JSON.stringify(this.data),\n      headers: {\n        Authorization: `bearer ${accessKey}`\n      }\n    })\n\n    return {\n      deployment: await response.json(),\n      dashboardUrl\n    }\n  }\n}\n"]}