{"version":3,"sources":["../src/fetch.js"],"names":["getAgent","configureFetchDefaults","agent","headers","proxy","process","env","HTTP_PROXY","http_proxy","HTTPS_PROXY","https_proxy","agentOptions","Object","assign","ca","HTTPS_CA","https_ca","caCerts","caArr","split","concat","map","cert","replace","cafile","HTTPS_CAFILE","https_cafile","caPathArr","cafilePath","fs","readFileSync","trim","length","rejectUnauthorized","HttpsProxyAgent","https","Agent","undefined","currentVersion","url","options","SDK_HTTP_DEBUG","console","log","method","JSON","stringify","body","SLS_DEBUG","response"],"mappings":"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","file":"fetch.js","sourcesContent":["import fs from 'fs'\nimport https from 'https'\nimport fetch from 'node-fetch'\nimport HttpsProxyAgent from 'https-proxy-agent'\nimport { checkHttpResponse } from './utils'\nimport { version as currentVersion } from '../package.json'\nimport { parse as parseUrl } from 'url'\n\nlet agent\nlet headers\n\nexport function getAgent() {\n  // Use HTTPS Proxy (Optional)\n  const proxy =\n    process.env.proxy ||\n    process.env.HTTP_PROXY ||\n    process.env.http_proxy ||\n    process.env.HTTPS_PROXY ||\n    process.env.https_proxy\n\n  const agentOptions = {}\n  if (proxy) {\n    Object.assign(agentOptions, parseUrl(proxy))\n  }\n\n  const ca = process.env.ca || process.env.HTTPS_CA || process.env.https_ca\n\n  let caCerts = []\n\n  if (ca) {\n    // Can be a single certificate or multiple, comma separated.\n    const caArr = ca.split(',')\n    // Replace the newline -- https://stackoverflow.com/questions/30400341\n    caCerts = caCerts.concat(caArr.map((cert) => cert.replace(/\\\\n/g, '\\n')))\n  }\n\n  const cafile = process.env.cafile || process.env.HTTPS_CAFILE || process.env.https_cafile\n\n  if (cafile) {\n    // Can be a single certificate file path or multiple paths, comma separated.\n    const caPathArr = cafile.split(',')\n    caCerts = caCerts.concat(caPathArr.map((cafilePath) => fs.readFileSync(cafilePath.trim())))\n  }\n\n  if (caCerts.length > 0) {\n    Object.assign(agentOptions, {\n      rejectUnauthorized: true,\n      ca: caCerts\n    })\n  }\n\n  if (proxy) {\n    return new HttpsProxyAgent(agentOptions)\n  } else if (agentOptions.ca) {\n    return new https.Agent(agentOptions)\n  }\n  return undefined\n}\n\nexport function configureFetchDefaults() {\n  agent = getAgent()\n\n  headers = {\n    'Content-Type': 'application/json',\n    'x-platform-version': currentVersion\n  }\n}\n\nexport default async (url, options = {}) => {\n  if (process.env.SDK_HTTP_DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log(\n      `platform-sdk fetching: ${options.method || 'GET'} ${url} ${JSON.stringify(options.headers) ||\n        'NO_HEADERS'} ${options.body || 'NO_BODY'}`\n    )\n  } else if (process.env.SLS_DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log(`platform-sdk fetching: ${options.method || 'GET'} ${url}`)\n  }\n  const response = await fetch(url, {\n    agent,\n    ...options,\n    headers: {\n      ...headers,\n      ...(options.headers || {})\n    }\n  })\n  await checkHttpResponse(response)\n  return response\n}\n"]}